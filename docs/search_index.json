[["index.html", "データエンジニアリング人材養成演習補助教材 はじめに", " データエンジニアリング人材養成演習補助教材 滋賀大学DEMLセンター 最終更新日 2021-02-20 はじめに 本教材は、滋賀大学の集中講義「データエンジニアリング人材養成演習」の補助教材です。 講義で触れていないパッケージ、主にtidyverseを利用した資料となっております。 より詳細なことは導入編に記載されていますので、そちらをご覧ください。各章のスライド版の資料は以下のlinkよりご覧いただけます。 導入編 初級編前半 初級編後半 中級編前半 中級編後半 著者 秋山浩希 滋賀大学大学院データサイエンス研究科 修士2回生 DEMLセンター員 大里隆也 滋賀大学 特任助教, (株)帝国データバンク 菊川康彬 (株)帝国データバンク "],["book_00_introduction.html", "1 導入編 1.1 本資料について 1.2 tidyverse 1.3 tibble 1.4 パイプ演算子 %&gt;% 1.5 プロジェクト 1.6 ディレクトリ(フォルダ)構成 1.7 here 1.8 helpファイルの開き方 1.9 クォーテーションの使いわけ おわり", " 1 導入編 1.1 本資料について 1.1.1 対象読者 「データエンジニアリング養成演習」受講者 滋賀大学×帝国データバンクの集中講義 目安となるスキルレベル Rに標準搭載されている関数でデータの前処理ができる Rを用いたデータ分析の結果について、発表経験がある 1.1.2 目的 TDBの集中講義では、Rに標準搭載されている関数を中心に前処理を行ってきましたが、ここではパッケージの活用による、さらなる効率化・汎用化を目指します。 Rの強み Rには豊富なパッケージが用意されています 中でも、近年ではHadley Wichkamらが開発したtidyverseというパッケージが注目され、急速に普及しています パッケージを使わずにRでプログラミングを行うことは、石でマンモスを狩っていることに等しいです tidyverseという強力な武器を使わない手はありません 1.1.3 構成 導入編 初級編前半 初級編後半 中級編前半 中級編後半 上級編（執筆中） 付録（執筆中） Python版も執筆中 1.1.4 到達目標 初級編 データの読込から結合、集計などのデータ研磨を行い、データの出力までを自由にできるようになる 中級編 複数ファイルに対して効率的な処理を実行できる 与えられた指標算出ロジックを実装できる 基本的なデータの可視化を実行できる 上級 目的に合致した処理を行えるパッケージを適宜探索・活用することができる 並列処理などを用いて、大規模データに対しても効率的な処理を行うことができる 自ら関数などを作成して、汎用的なプログラムなどを作成することができる データベースなどの基盤技術に関する知識を習得する 1.1.5 導入編の内容 導入編では、初級編・中級編を学ぶ上で必要となる前提知識について説明します tidyverseパッケージ tibbleデータフレーム パイプ演算子 %&gt;% プロジェクトとは ディレクトリ(フォルダ)構成とは hereパッケージ 1.2 tidyverse 現代でRを使うなら必需品！！ 1.2.1 tidyverseとは データサイエンス向けに設計されたRパッケージのコレクションの総称です tidyverseに含まれているパッケージは、すべて統一的な記法やデータ構造を扱うように設計されています tidyverseをインストールして読み込むことで、以下を含むパッケージ群をまとめて使用できるようになります dplyr tibble tidyr ggplot2 readr purrr tidyverse公式HP（https://www.tidyverse.org/） 1.2.2 なぜtidyverseを使うのか 処理が速い 可読性が高い 統一的な記法で書ける コーディングの生産性が上がる などなど、さまざまな理由があります。 1.2.3 tidyverseのインストールと読込 install.packagesの実行は一度だけでOKです 一度実行すればPCにインストールされます。R（Rstudio）起動時に毎回実行する必要はありません libraryはインストールされているパッケージを読み込む操作です。 R（Rstudio）を起動するたびに実行する必要があります install.packages(&quot;tidyverse&quot;) # インストール library(tidyverse) # 読み込み 1.3 tibble tidyverseで扱うdata.frame 1.3.1 tibbleとは ユーザーフレンドリーなデータフレームです 基本的には通常のdata.frameと変わりません tibbleの方が、データの表示方法がスマートです tidyverseでは基本的にtibbleを扱います data.frameとtibbleを比較してみましょう カラム\\(x\\)に1から50までの数字が入ったデータを作成します data.frameをdat_df、tibbleをdat_tbとします dat_df dat_df &lt;- data.frame( x = 1:50 ) dat_tb dat_tb &lt;- tibble( x = 1:50 ) 1.3.2 コンソール表示の比較 tibbleではデータの次元数とカラム型が表示され、表示件数が10行までになります。見やすいです！ dat_df x 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 dat_tb # A tibble: 50 x 1 x &lt;int&gt; 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 # ... with 40 more rows 1.4 パイプ演算子 %&gt;% コーディングの強力な味方 1.4.1 パイプ演算子とは %&gt;% これがパイプ演算子です %&gt;% のまえの出力を、%&gt;% のうしろの関数の第一引数に渡します パイプを使う例と使わない例を見てみましょう データの先頭3行を見たいとき、通常なら左のように書きます パイプ演算子%&gt;%を使うと、右のように書くことができます head(x = dat_tb, n = 3) # A tibble: 3 x 1 x &lt;int&gt; 1 1 2 2 3 3 dat_tb %&gt;% head(n = 3) # A tibble: 3 x 1 x &lt;int&gt; 1 1 2 2 3 3 1.4.2 パイプ演算子のメリット 途中経過を変数に代入する必要がない スクリプトの削減 メモリの節約 関数の入れ子構造を避けられる 直観的に操作・理解しやすく可読性が高い これらのメリットを、例を通して確認してみましょう。 たとえば、次のような処理をすることを考えます。 例：dat_tbの先頭5行の合計値（15）を算出する # A tibble: 5 x 1 x &lt;int&gt; 1 1 2 2 3 3 4 4 5 5 パイプを使わない方法 変数に代入 tmp &lt;- head(dat_tb, 5) sum(tmp) [1] 15 関数の入れ子 sum(head(dat_tb, 5)) [1] 15 パイプを使う方法 dat_tb %&gt;% head(5) %&gt;% sum() [1] 15 パイプのコツ %&gt;%が長く連続するときは、%&gt;%の後ろで改行を挟むと可読性が高くなります また、%&gt;%で流れてきた前のデータは「.」で表現できるので、引数を明示して書くことも可能です。パイプ前を第一引数以外に渡したいときに有効です dat_tb %&gt;% head(n = 5, x = .) %&gt;% sum() %&gt;% exp() %&gt;% log() [1] 15 パイプを使わないと… log(exp(sum(head(dat_tb, 5)))) # ﾁｮｯﾄﾂﾗｲ [1] 15 このようなコードがたくさん書かれていると、コードを読み解いていくのに労力がかかります 「短いコードを書くこと」よりも「理解しやすいコードを書くこと」を意識しましょう パイプは理解しやすいコードを書くための1つの手段です パイプ演算子のショートカットコマンド Windows：「Ctrl + Shift + M」 Mac：「Cmd + Option + M」 1.4.3 参考 初級編で使用するdplyrの主な関数一覧をテーブルにまとめました これらの関数は全てtibbleを第一引数に要求します 関数の返り値も、全てtibbleです 従ってこれらの関数をパイプで繋げることができます 関数 操作 bind_rows(cols) データを縦(横)結合 distinct データの重複を消去 select データの変数選択 left_join データのjoin filter データの条件抽出 arrange データのソート mutate データのカラム定義 # 例(このcodeは動きません) data %&gt;% bind_rows(data_2) %&gt;% distinct() %&gt;% select(col_1, col_2) %&gt;% left_join(data_3) %&gt;% filter(col_3 &lt; 5) %&gt;% arrange(col_3) %&gt;% mutate(col_4 = col_3*5) 1.5 プロジェクト 全てはプロジェクトから始まる… 1.5.1 プロジェクトとは A社のデータ研磨、B社のデータ研磨、というように、案件の最も大きなくくりのことをプロジェクトと呼びます プロジェクトごとにフォルダを1つ作成します フォルダ下は統一されたディレクトリ構成(後述)を持つことが望ましいです 1.5.2 R project プロジェクトはIDE(統合開発環境)などによって呼び名が変わります。例えばRstudioではProject、VScodeではworkspaceなどと呼ばれます しかし、呼び名が変われど、プロジェクトやディレクトリ構成の考え方は変わりません プロジェクトフォルダの直下にProjectファイルを作成することで、そのフォルダがプロジェクトフォルダであることをIDEに認識させます では、実際にRstudioでProjectを作成してみましょう。 今回はプロジェクトフォルダとProjectファイルを同時に作成します。 1.5.3 R projectの作成 からの手順に従ってR Projectを作成します。 R projectが作成されると次のような画面が開きます。 ExplorerからR projectを起動することもできます。 1.5.4 R projectの利点 Rstudio終了時のscriptのタブを維持できる 起動時の作業ディレクトリ(working directory)がProjectファイルのある場所になる gitによるバージョン管理が容易になる プロジェクトごとにRstudioの設定を保存しておくことができる R projectでのgitによるバージョン管理は、付録で説明する予定です。 1.6 ディレクトリ(フォルダ)構成 サルでもわかる構成を！ 1.6.1 ディレクトリ構成とは 文字通り、ディレクトリの構成のことです ディレクトリ構成を事前に定義しておくと、個人にとっても複数人にとっても有益な事がたくさんあります たとえば、demo_dirというプロジェクトのディレクトリ構成が右下図のようになっているとします 1.6.2 demo_dirのディレクトリ構成詳細 青字はフォルダです html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ubklmbqvsy .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 23px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ubklmbqvsy .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ubklmbqvsy .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ubklmbqvsy .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #ubklmbqvsy .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ubklmbqvsy .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ubklmbqvsy .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ubklmbqvsy .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ubklmbqvsy .gt_column_spanner_outer:first-child { padding-left: 0; } #ubklmbqvsy .gt_column_spanner_outer:last-child { padding-right: 0; } #ubklmbqvsy .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #ubklmbqvsy .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ubklmbqvsy .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ubklmbqvsy .gt_from_md > :first-child { margin-top: 0; } #ubklmbqvsy .gt_from_md > :last-child { margin-bottom: 0; } #ubklmbqvsy .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ubklmbqvsy .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #ubklmbqvsy .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ubklmbqvsy .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #ubklmbqvsy .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ubklmbqvsy .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ubklmbqvsy .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ubklmbqvsy .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ubklmbqvsy .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ubklmbqvsy .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #ubklmbqvsy .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ubklmbqvsy .gt_sourcenote { font-size: 90%; padding: 4px; } #ubklmbqvsy .gt_left { text-align: left; } #ubklmbqvsy .gt_center { text-align: center; } #ubklmbqvsy .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ubklmbqvsy .gt_font_normal { font-weight: normal; } #ubklmbqvsy .gt_font_bold { font-weight: bold; } #ubklmbqvsy .gt_font_italic { font-style: italic; } #ubklmbqvsy .gt_super { font-size: 65%; } #ubklmbqvsy .gt_footnote_marks { font-style: italic; font-size: 65%; } フォルダ 中身 . ルートディレクトリ(demo_dir) code .Rファイルなどの研磨スクリプト input 生データやマスタデータ output 中間ファイルや研磨後データ plot データの可視化をしたプロット html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #kcsdydyhoc .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 23px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #kcsdydyhoc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kcsdydyhoc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #kcsdydyhoc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #kcsdydyhoc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kcsdydyhoc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kcsdydyhoc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #kcsdydyhoc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #kcsdydyhoc .gt_column_spanner_outer:first-child { padding-left: 0; } #kcsdydyhoc .gt_column_spanner_outer:last-child { padding-right: 0; } #kcsdydyhoc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #kcsdydyhoc .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #kcsdydyhoc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #kcsdydyhoc .gt_from_md > :first-child { margin-top: 0; } #kcsdydyhoc .gt_from_md > :last-child { margin-bottom: 0; } #kcsdydyhoc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #kcsdydyhoc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #kcsdydyhoc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kcsdydyhoc .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #kcsdydyhoc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kcsdydyhoc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #kcsdydyhoc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #kcsdydyhoc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kcsdydyhoc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kcsdydyhoc .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #kcsdydyhoc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kcsdydyhoc .gt_sourcenote { font-size: 90%; padding: 4px; } #kcsdydyhoc .gt_left { text-align: left; } #kcsdydyhoc .gt_center { text-align: center; } #kcsdydyhoc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #kcsdydyhoc .gt_font_normal { font-weight: normal; } #kcsdydyhoc .gt_font_bold { font-weight: bold; } #kcsdydyhoc .gt_font_italic { font-style: italic; } #kcsdydyhoc .gt_super { font-size: 65%; } #kcsdydyhoc .gt_footnote_marks { font-style: italic; font-size: 65%; } ファイル 内容 README.txt 最初に読んでほしい文書。構成や備忘録などを記述 demo_dir.Rproj プロジェクトファイル 1.6.3 ディレクトリ構成を定義するメリット 以下の3点のようなメリットが挙げられます 情報が整理されていると効率的に作業ができる プロジェクトが変わっても、基本のディレクトリ構成が変わらなければ、プロジェクト間の移行が容易になる ディレクトリ構成がわかりやすく統一されていると、誰が見てもすぐに、どこに何があるかがわかる 上記3点目に関して、次のスライドのような事例を見てみましょう。 1.6.4 ディレクトリ構成の事例 folder_A folder_B 両フォルダとも中身は同じですがフォルダ名が少し異なります。 フォルダ名は統一されている方が共有がしやすいです。 本資料ではfolder_Aのような構成で進めます。 1.7 here pathの悩みから解放されるために 1.7.1 hereパッケージとは hereはpathの悩みを解消してくれるパッケージです hereを使えば、R projectファイルがある場所を起点(ルートディレクトリ)としてpathを書くことができます 異なるOS/個人間のプロジェクト共有が容易になります はじめにpathの悩み事例を紹介し、 次に視覚的にそれを説明し、 最後にhere関数の使用方法を説明します。 1.7.2 pathの悩みの具体例 よくある悩みとして、以下の3つのような事例があります。 OSによってpathのルートなどが異なる Mac: /Users/ユーザー名/Desktop/ Windows: C:/Users/ユーザー名/Desktop/ 個人間でユーザー名が異なるので絶対pathが異なる 鈴木さんPC: C:/Users/suzuki/Desktop/ 佐藤さんPC: C:/Users/tanaka/Desktop/ 作業ディレクトリが異なるので参照の相対pathが異なる C:/Users/suzuki/Desktop/Project_A/ C:/Users/suzuki/Desktop/Project_A/code/ このような場合、プロジェクトを共有した際にプログラムのpathを書き換える必要が生じます。 1.7.3 hereによる悩みの解消 hereを使えば、先ほどのような悩みはすべて解消します。 OSによってpathのルートなどが異なる Mac: /Users/ユーザー名/Desktop/ Windows: C:/Users/ユーザー名/Desktop/ R projectファイルのある場所をルートとするので問題なし 個人間でユーザー名が異なるので絶対pathも異なる 鈴木さんPC: C:/Users/suzuki/Desktop/ 佐藤さんPC: C:/Users/tanaka/Desktop/ 上と同様の理由で問題なし 作業ディレクトリが異なるので参照の相対pathが異なる C:/Users/suzuki/Desktop/Project_A/ C:/Users/suzuki/Desktop/Project_A/code/ ルートとディレクトリ構成が揃えば、相対pathを使う必要がない 1.7.4 悩み事例の視覚的説明 先ほどの事例を視覚的に説明します 下図のように、Project_Aというプロジェクトフォルダが鈴木さんのWindowsのDesktop上にあるとします このとき、読み込みたいデータdata.csvまでの絶対pathは以下のようになります C:/Users/Suzuki/Desktop/Project_A/input/data.csv 1.7.5 異なるOS/個人間によるpath相違の解消 Windowsユーザーの鈴木さんが作成したProject_Aを、Macユーザーの田中さんが受け取りました。 田中さんはProject_AをDocumentsに置きました dataまでの絶対pathは以下のように変更が必要です 変更前 C:/Users/Suzuki/Desktop/Project_A/input/data.csv 変更後 /Users/Tanaka/Documents/Project_A/input/data.csv 1.7.6 hereを使ったpath 前頁で絶対pathの変更を示しましたが、Project_A以下に関しては変える必要がありませんでした つまり、Project_Aがルートディレクトリになってくれるとpathの変更が必要なくなるということです これを実現してくれるのがhereです 1.7.7 hereの使い方 hereを読み込むと、ルートディレクトリが設定された場所(.Rprojがある場所)がメッセージで表示されます library(here) here() starts at C:/Users/ユーザー名/Desktop/Project_A 以下のようにしてhereを使うことで、.Rprojがある場所を起点にしてpathを書くことができます here(&quot;input/data.csv&quot;) C:/Users/ユーザー名/Desktop/Project_A/input/data.csv プロジェクトが起点になるため、プロジェクトフォルダを共有した際、pathを書き換える必要がなくなります 異なるOS間でのpathの齟齬も解消されます 以上の理由から、本資料ではhereを使用しています here(&quot;input/data.csv&quot;) &quot;C:/Users/ユーザー名/Desktop/Project_A/input/data.csv&quot; 1.8 helpファイルの開き方 困ったらhelp 1.8.1 コードが動かないときの対処法 コーディングで困ったら次の順番で対処しましょう １．errorをちゃんと読む ２．helpファイルを見る ３．ネットで調べる errorはちゃんと読みましょう helpファイルとは、関数の意味や引数の説明が書かれているもので、実装例なども書かれています 大抵の場合は１, ２で解決します ３でも解決しない場合はデキル人に聞きましょう １,３は説明不要なので、次頁では ２のhelpファイルの開き方について説明します 1.8.2 “？関数名”でhelp helpファイルを開くには、helpを見たい関数の頭に?マークを付けて実行します 関数の括弧はあってもなくても大丈夫です help(関数名)としても同様です Rstudioでは右下のHelp paneでhelpファイルが見れます ?here ?here() help(here) 1.9 クォーテーションの使いわけ \" ダブルクォート ’ シングルクォート ` バッククォート 1.9.1 クォートを使うとき 基本的に、Rのコードでクォートを使用するのは文字列を入力するときです たとえば以下のようにnに数値の100を代入した状態で、「n」と「“n”」を表示します nでは代入された100が表示されますが、“n”では数値100ではなく、文字列nが表示されています n &lt;- 100 cat(n) 100 n &lt;- 100 cat(&quot;n&quot;) n 1.9.2 ダブルクォート・シングルクォート ダブルクォートとシングルクォートのどちらを使用するかは、基本的には個人の好みです 混在するとややこしいので、統一はしましょう 覚えておく必要があるのは文字列の中にクォートを含めたい場合で、以下のどちらかで対応します words &lt;- &quot;print(&#39;n&#39;)&quot; cat(words) print(&#39;n&#39;) words &lt;- &#39;print(&quot;n&quot;)&#39; cat(words) print(&quot;n&quot;) 1.9.3 バッククォート バッククォートは、非標準的な文字列やカラム名などを扱う際に使用します 非標準的な文字列やカラム名とは、括弧を含む文字列や、数字で始まるカラム名などのことです なぜシングル・ダブルクォートではだめなのか、具体例で確認していきます たとえば次のようなデータ(df)があるとします # A tibble: 3 x 3 `1` 売上 `売上(千円)` &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 1 4 7 2 2 5 8 3 3 6 9 1.9.4 括弧つきカラムの参照 dfのカラムを$記号で参照すると、括弧つきのカラムでエラーが出てしまいました 売上(千円)が関数として認識されてしまったからです 括弧つきカラムはバッククォートで囲みましょう df$売上 [1] 4 5 6 df$売上(千円) Error in eval(expr, envir, enclos): attempt to apply non-function df$`売上(千円)` [1] 7 8 9 1.9.5 非標準文字列は必ずバッククォートを使用 実は先ほどの例ではdf$“売上(千円)”でも対応可能でした しかし、以下の例のようにダブルクォートでは対応できない場合もしばしばあるので、非標準文字列は必ずバッククォートを使用すると決めておきましょう 例)col_3に、(col_1)の値でなく文字列“(col_1)”が代入された d &lt;- tibble( `(col_1)` = 1:3) d # A tibble: 3 x 1 `(col_1)` &lt;int&gt; 1 1 2 2 3 3 d %&gt;% mutate( col_2 = `(col_1)`*10, col_3 = &quot;(col_1)&quot;) # A tibble: 3 x 3 `(col_1)` col_2 col_3 &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; 1 1 10 (col_1) 2 2 20 (col_1) 3 3 30 (col_1) おわり 導入編は以上になります。 著者 秋山浩希 滋賀大学大学院データサイエンス研究科 修士2回生 DEMLセンター員 大里隆也 滋賀大学 特任助教, (株)帝国データバンク 菊川康彬 (株)帝国データバンク "],["book_01_beginner_1st_half.html", "2 初級編前半 はじめに 2.1 ステップ１：CSVファイルの読み込み 2.2 ステップ２：データの縦結合 2.3 ステップ３：レコードの重複消去 2.4 ステップ４：カラムの選択 2.5 ステップ５：データの横結合 2.6 箸休めスライド", " 2 初級編前半 はじめに 研磨ストーリー 顧客から受領した企業リストに対して企業概要データを付与し、データの集計表や指標を算出して顧客へ渡します。 作業イメージ 添えてある数字が各ステップに対応しています。 ディレクトリ構成 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #qzwcsuhtwt .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 21px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #qzwcsuhtwt .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qzwcsuhtwt .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #qzwcsuhtwt .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #qzwcsuhtwt .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qzwcsuhtwt .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qzwcsuhtwt .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #qzwcsuhtwt .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #qzwcsuhtwt .gt_column_spanner_outer:first-child { padding-left: 0; } #qzwcsuhtwt .gt_column_spanner_outer:last-child { padding-right: 0; } #qzwcsuhtwt .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #qzwcsuhtwt .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #qzwcsuhtwt .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #qzwcsuhtwt .gt_from_md > :first-child { margin-top: 0; } #qzwcsuhtwt .gt_from_md > :last-child { margin-bottom: 0; } #qzwcsuhtwt .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #qzwcsuhtwt .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #qzwcsuhtwt .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qzwcsuhtwt .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #qzwcsuhtwt .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qzwcsuhtwt .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #qzwcsuhtwt .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #qzwcsuhtwt .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qzwcsuhtwt .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qzwcsuhtwt .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #qzwcsuhtwt .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qzwcsuhtwt .gt_sourcenote { font-size: 90%; padding: 4px; } #qzwcsuhtwt .gt_left { text-align: left; } #qzwcsuhtwt .gt_center { text-align: center; } #qzwcsuhtwt .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #qzwcsuhtwt .gt_font_normal { font-weight: normal; } #qzwcsuhtwt .gt_font_bold { font-weight: bold; } #qzwcsuhtwt .gt_font_italic { font-style: italic; } #qzwcsuhtwt .gt_super { font-size: 65%; } #qzwcsuhtwt .gt_footnote_marks { font-style: italic; font-size: 65%; } フォルダ 中身 . ルートディレクトリ(data_engineering) code 本資料で使用する.Rファイル input 生データやマスタデータ output 中間ファイルや研磨後データ ライブラリを読み込む tidyverseとhereを読み込みます library(tidyverse) library(here) 2.1 ステップ１：CSVファイルの読み込み read_csv glimpse 2.1.1 作業内容 以下の3種類のcsvファイルを読み込みましょう 企業リスト1.csv 企業リスト2.csv 企業概要データ_2019年1月時点.csv 2.1.2 read_csvでcsvデータを読み込む まずは企業リスト1.csvのみを読み込みます read_csvの引数の説明は2頁先ににまとめてあります カラム型を指定しないときは、カラム型をある程度自動識別し、読み込んだカラム型のメッセージが出ます df_1 &lt;- read_csv(file = here(&quot;input/企業リスト1.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;)) df_1 -- Column specification ------------------------------------------------------ cols( 企業コード = col_character() ) # A tibble: 500 x 1 企業コード &lt;chr&gt; 1 J31299770 2 E32002046 3 D42585413 4 J39971897 5 J93122775 6 J34719839 7 L12571447 8 D42395106 9 J34594067 10 E32304350 # ... with 490 more rows 同様にして企業リスト2.csvも読み込みます ここではカラム型の指定も行っています df_2 &lt;- read_csv(file = here(&quot;input/企業リスト2.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = &quot;c&quot;) # これでも可 col_types = cols(企業コード = col_character()) df_2 # A tibble: 500 x 1 企業コード &lt;chr&gt; 1 J38109080 2 D42631600 3 H42150036 4 E32060947 5 B02122602 6 J34020161 7 J34747662 8 J34830369 9 E32572710 10 J34109464 # ... with 490 more rows 2.1.3 read_csvの主要な引数 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #rwzhhvkagm .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 24px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #rwzhhvkagm .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #rwzhhvkagm .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #rwzhhvkagm .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #rwzhhvkagm .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rwzhhvkagm .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #rwzhhvkagm .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #rwzhhvkagm .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #rwzhhvkagm .gt_column_spanner_outer:first-child { padding-left: 0; } #rwzhhvkagm .gt_column_spanner_outer:last-child { padding-right: 0; } #rwzhhvkagm .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #rwzhhvkagm .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #rwzhhvkagm .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #rwzhhvkagm .gt_from_md > :first-child { margin-top: 0; } #rwzhhvkagm .gt_from_md > :last-child { margin-bottom: 0; } #rwzhhvkagm .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #rwzhhvkagm .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #rwzhhvkagm .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #rwzhhvkagm .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #rwzhhvkagm .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #rwzhhvkagm .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #rwzhhvkagm .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #rwzhhvkagm .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #rwzhhvkagm .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #rwzhhvkagm .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #rwzhhvkagm .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #rwzhhvkagm .gt_sourcenote { font-size: 90%; padding: 4px; } #rwzhhvkagm .gt_left { text-align: left; } #rwzhhvkagm .gt_center { text-align: center; } #rwzhhvkagm .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #rwzhhvkagm .gt_font_normal { font-weight: normal; } #rwzhhvkagm .gt_font_bold { font-weight: bold; } #rwzhhvkagm .gt_font_italic { font-style: italic; } #rwzhhvkagm .gt_super { font-size: 65%; } #rwzhhvkagm .gt_footnote_marks { font-style: italic; font-size: 65%; } 引数 default 意味 file 読み込むファイルのpathを指定 col_names TRUE 1行目をカラム名として読み込む col_types NULL 読み込むカラム型を指定（指定方法は後述） locale UTF-8, UTC locale関数でencodingやタイムゾーン等を指定する skip 0 先頭n行を飛ばして読み込む n_max Inf 読み込む最大行数 locale関数について 例) locale(encoding = “shift-jis”, tz = “Japan”) 他にもdate_formatなどで日付表示方法などが指定できます timestampデータなどがあるときに有効です 2.1.4 col_typesの書き方 文字列で指定 col_types = “cci”と書くことで、1列目と2列目は文字型、3列目は整数型で読み込みというように指定ができます 簡易的なコードを書いている場合はこちらでよいでしょう cols()で指定（推奨） col_types = cols(カラム名 = col_character()) と記述します データ読み込み時点からカラム型を意識しましょう カラム型 関数 略記 論理型 col_logical() l 整数型 col_integer() i 少数型 col_double() d 文字型 col_character() c 因子型 col_factor() f skip col_skip() - # 例）このコードは動きません data &lt;- read_csv( here(&quot;input/data.csv&quot;), col_types = cols( col_1 = col_character(), col_2 = col_integer() )) 2.1.5 COSMOS2（c2）データの読み込み ステップ4以降で扱うCOSMOS2のデータ(企業概要データ_2019年1月時点.csv)を読み込みます c2_201901 &lt;- read_csv( here(&quot;input/企業概要データ_2019年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;)) -- Column specification ------------------------------------------------------ cols( 企業コード = col_character(), 本社所在地市区郡 = col_character(), 業種大分類 = col_character(), `資本金(千円)` = col_double(), 従業員数 = col_double(), 最新期業績決算期年 = col_double(), 最新期業績決算期月 = col_double(), `最新期業績売上高(百万円)` = col_double(), `最新期業績税引後利益(千円)` = col_double(), 創業年 = col_double(), 設立年 = col_double() ) 2.1.6 glimpseでデータを見る カラム数が多いときは、コンソールでデータを表示しても、全てのカラムを確認することができません c2_201901 # A tibble: 2,111 x 11 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 01103_北海道札幌市東区~ G:卸売・小売業，~ 862800 114 2 G92155065 13113_東京都渋谷区~ H:金融・保険業~ 3997800 2270 3 G92143569 01104_北海道札幌市白石区~ G:卸売・小売業，~ 830800 627 4 G92141220 01101_北海道札幌市中央区~ E:建設業 981800 194 5 G92190707 01109_北海道札幌市手稲区~ G:卸売・小売業，~ 419100 267 6 G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 7 G92508571 27128_大阪府大阪市中央区~ F:製造業 53879600 745 8 G92559088 01101_北海道札幌市中央区~ K:電気・ガス・水~ 27874600 7207 9 G92552130 01104_北海道札幌市白石区~ E:建設業 3275400 1409 10 G92557890 01110_北海道札幌市清田区~ F:製造業 3815700 295 # ... with 2,101 more rows, and 6 more variables: 最新期業績決算期年 &lt;dbl&gt;, # 最新期業績決算期月 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 創業年 &lt;dbl&gt;, 設立年 &lt;dbl&gt; glimpse 大規模データの確認にはglimpseを使いましょう カラムが縦に並ぶのでデータが確認しやすいです glimpse(c2_201901) Rows: 2,111 Columns: 11 $ 企業コード &lt;chr&gt; &quot;G92155635&quot;, &quot;G92155065&quot;, &quot;G92143569&quot;, &quot;G... $ 本社所在地市区郡 &lt;chr&gt; &quot;01103_北海道札幌市東区&quot;, &quot;13113_東京都渋谷区&quot;, &quot;01104_北海道... $ 業種大分類 &lt;chr&gt; &quot;G:卸売・小売業，飲食&quot;, &quot;H:金融・保険業&quot;, &quot;G:卸売・小売業，飲食&quot;,... $ `資本金(千円)` &lt;dbl&gt; 862800, 3997800, 830800, 981800, 419100, ... $ 従業員数 &lt;dbl&gt; 114, 2270, 627, 194, 267, 435, 745, 7207... $ 最新期業績決算期年 &lt;dbl&gt; 2018, 2018, 2018, 2018, 2018, 2018, 2018, 201... $ 最新期業績決算期月 &lt;dbl&gt; 3, 3, 3, 3, 2, 3, 3, 3, 3, 12, 3, 3, 3, 12, 3... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 19509, 127123, 35949, 100, 42211, 18093, 82001,... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 539348, 4389077, -18044, 631424, 252220, 88283, ... $ 創業年 &lt;dbl&gt; 1946, 0, 1932, 1917, 0, 1943, 0, 0, 0, ... $ 設立年 &lt;dbl&gt; 1951, 1948, 1951, 1951, 1971, 1946, 192... 2.1.7 読み込み時に注意すべき例：０落ち col_types = “ic” # A tibble: 3 x 2 都道府県CODE 都道府県名 &lt;int&gt; &lt;chr&gt; 1 1 北海道 2 2 青森県 3 3 岩手県 col_types = “cc” # A tibble: 3 x 2 都道府県CODE 都道府県名 &lt;chr&gt; &lt;chr&gt; 1 01 北海道 2 02 青森県 3 03 岩手県 左の例では、都道府県CODEを整数として読み込んでいるので頭の0が落ちてしまっています 頭の0に意味があるときは、0落ちは問題になります データを読み込むときは必ず生データを確認し、カラム型などを意識しましょう 2.1.8 生データの確認方法 生データのファイルは、任意のテキストエディタ等で確認する他にも、次のようにして確認する方法があります read_lines関数を使って、read_csvと同様に書くことで、生データをテキストとして1行ずつ読み込みます read_lines(file = here(&quot;input/都道府県マスタ.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), n_max = 10) # 先頭から10行を読み込む [1] &quot;都道府県CODE,都道府県名&quot; &quot;01,北海道&quot; [3] &quot;02,青森県&quot; &quot;03,岩手県&quot; [5] &quot;04,宮城県&quot; &quot;05,秋田県&quot; [7] &quot;06,山形県&quot; &quot;07,福島県&quot; [9] &quot;08,茨城県&quot; &quot;09,栃木県&quot; 都道府県CODEは文字列読み込みが良いと考えられます 2.1.9 参考１：カラム型指定tips カラム数が多いデータでcol_typesを手作業で入力するのは面倒なので、tipsを伝授します c2_201901 &lt;- read_csv( here(&quot;input/企業概要データ_2019年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = cols( 企業コード = col_character(), 本社所在地市区郡 = col_character(), 業種大分類 = col_character(), `資本金(千円)` = col_double(), 従業員数 = col_double(), 最新期業績決算期年 = col_double(), 最新期業績決算期月 = col_double(), `最新期業績売上高(百万円)` = col_double(), `最新期業績税引後利益(千円)` = col_double(), 創業年 = col_double(), 設立年 = col_double() ) ) カラム型を指定せずに100行程データを読み込み、読み込んだデータをspecという関数にかけます spec関数の出力をコピーして、必要があれば編集し、read_csvの引数に与えればおっけーです read_csv(file = here(&quot;input/企業概要データ_2019年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), n_max = 100) %&gt;% spec() cols( 企業コード = col_character(), 本社所在地市区郡 = col_character(), 業種大分類 = col_character(), `資本金(千円)` = col_double(), 従業員数 = col_double(), 最新期業績決算期年 = col_double(), 最新期業績決算期月 = col_double(), `最新期業績売上高(百万円)` = col_double(), `最新期業績税引後利益(千円)` = col_double(), 創業年 = col_double(), 設立年 = col_double() ) 2.1.10 参考２：()付きカラムの取り扱い glimpse(c2_201901) Rows: 2,111 Columns: 11 $ 企業コード &lt;chr&gt; &quot;G92155635&quot;, &quot;G92155065&quot;, &quot;G92143569&quot;, &quot;G... $ 本社所在地市区郡 &lt;chr&gt; &quot;01103_北海道札幌市東区&quot;, &quot;13113_東京都渋谷区&quot;, &quot;01104_北海道... $ 業種大分類 &lt;chr&gt; &quot;G:卸売・小売業，飲食&quot;, &quot;H:金融・保険業&quot;, &quot;G:卸売・小売業，飲食&quot;,... $ `資本金(千円)` &lt;dbl&gt; 862800, 3997800, 830800, 981800, 419100, ... $ 従業員数 &lt;dbl&gt; 114, 2270, 627, 194, 267, 435, 745, 7207... $ 最新期業績決算期年 &lt;dbl&gt; 2018, 2018, 2018, 2018, 2018, 2018, 2018, 201... $ 最新期業績決算期月 &lt;dbl&gt; 3, 3, 3, 3, 2, 3, 3, 3, 3, 12, 3, 3, 3, 12, 3... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 19509, 127123, 35949, 100, 42211, 18093, 82001,... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 539348, 4389077, -18044, 631424, 252220, 88283, ... $ 創業年 &lt;dbl&gt; 1946, 0, 1932, 1917, 0, 1943, 0, 0, 0, ... $ 設立年 &lt;dbl&gt; 1951, 1948, 1951, 1951, 1971, 1946, 192... ()付きカラムは基本的に推奨されません 理由は、コードの()と混同しエラーが起こるからです Rでは()付きカラムはバッククォートで囲むようにしてください コンソールでの表示もバッククォートが付いているのがわかります 2.2 ステップ２：データの縦結合 bind_rows 2.2.1 作業内容 ステップ1で読み込んだ以下の2つのデータを縦に結合して1つのデータにします df_1 # A tibble: 500 x 1 企業コード &lt;chr&gt; 1 J31299770 2 E32002046 3 D42585413 4 J39971897 5 J93122775 6 J34719839 7 L12571447 8 D42395106 9 J34594067 10 E32304350 # ... with 490 more rows df_2 # A tibble: 500 x 1 企業コード &lt;chr&gt; 1 J38109080 2 D42631600 3 H42150036 4 E32060947 5 B02122602 6 J34020161 7 J34747662 8 J34830369 9 E32572710 10 J34109464 # ... with 490 more rows 2.2.2 bind_rowsでデータの縦(行)結合 結合したいデータをbind_rowsの引数に与えることで、データを縦結合することができます df_1とdf_2を縦結合したデータをdf_3とします df_3 &lt;- bind_rows(df_1, df_2) df_3 # A tibble: 1,000 x 1 企業コード &lt;chr&gt; 1 J31299770 2 E32002046 3 D42585413 4 J39971897 5 J93122775 6 J34719839 7 L12571447 8 D42395106 9 J34594067 10 E32304350 # ... with 990 more rows 2.2.3 参考１：３つ以上のデータの縦結合 3つ以上のデータを縦結合したい場合も、2つの場合と同様にして引数に渡します bind_rows(df_1, df_2, df_3) # A tibble: 2,000 x 1 企業コード &lt;chr&gt; 1 J31299770 2 E32002046 3 D42585413 4 J39971897 5 J93122775 6 J34719839 7 L12571447 8 D42395106 9 J34594067 10 E32304350 # ... with 1,990 more rows 2.2.4 参考２：カラム名不一致データの縦結合 カラム名が一致するものはカラム名で紐づく 全てのデータとカラムが保持される 欠損値はNAとなる d1 # A tibble: 1 x 2 col_1 col_2 &lt;dbl&gt; &lt;dbl&gt; 1 1 1 d2 # A tibble: 1 x 2 col_2 col_3 &lt;dbl&gt; &lt;dbl&gt; 1 2 2 bind_rows(d1, d2) # A tibble: 2 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 NA 2 NA 2 2 2.2.5 参考３：データの横（列）結合 縦結合と同様にbind_colsでデータを横(列)結合できます カラム名が重複すると、カラムの識別がつくようにカラム名が自動的に変更されます bind_cols(df_1, df_2) # A tibble: 500 x 2 企業コード...1 企業コード...2 &lt;chr&gt; &lt;chr&gt; 1 J31299770 J38109080 2 E32002046 D42631600 3 D42585413 H42150036 4 J39971897 E32060947 5 J93122775 B02122602 6 J34719839 J34020161 7 L12571447 J34747662 8 D42395106 J34830369 9 J34594067 E32572710 10 E32304350 J34109464 # ... with 490 more rows 縦結合とは異なり、行数が揃っていないと横結合することはできません bind_cols(df_1, df_3) Error: Can&#39;t recycle `..1` (size 500) to match `..2` (size 1000). 補足 bind_colsはbase関数のcbindと同様の操作で、キーの指定をした横結合はしません 単純にデータが横にくっつきます キーを指定する横結合はステップ５で説明します 2.3 ステップ３：レコードの重複消去 n_distinct distinct 2.3.1 作業内容 企業コードを縦結合したデータには、重複しているレコードがあります 重複レコードの数を調べて重複レコードを消去します 縦結合したデータdf_3で重複している企業コード # A tibble: 226 x 1 企業コード &lt;chr&gt; 1 B02122602 2 B02122602 3 B42124422 4 B42124422 5 B42539783 6 B42539783 7 B42588245 8 B42588245 9 C62177407 10 C62177407 # ... with 216 more rows 2.3.2 n_distinctで重複があるか調べる n_distinctは、引数にデータを与えると、与えたデータから重複レコードを除いたレコード数を返す関数です たとえば左データでは、7行のうち2,4,5行目の計3行が重複しているので、n_distinctにかけると4が返ってきます d # A tibble: 7 x 1 code &lt;chr&gt; 1 a 2 a 3 b 4 b 5 a 6 c 7 d d %&gt;% n_distinct() [1] 4 元のレコード数からn_distinctの返り値（重複を除いたレコード数）を引くことで、重複していたレコード数がわかります この値が0であった場合は、重複レコードは1つもないということになります d # A tibble: 7 x 1 code &lt;chr&gt; 1 a 2 a 3 b 4 b 5 a 6 c 7 d nrow(d) - n_distinct(d) [1] 3 2.3.3 distinctで重複レコードの消去 distinctの引数にデータを与えると、重複レコードが消去されたデータが返ってきます 新出レコードは残し、既出レコードは消去されます d # A tibble: 7 x 1 code &lt;chr&gt; 1 a 2 a 3 b 4 b 5 a 6 c 7 d d %&gt;% distinct() # A tibble: 4 x 1 code &lt;chr&gt; 1 a 2 b 3 c 4 d 2.3.4 企業コードの重複確認と重複消去 企業コードの重複数を確認し、重複を消去します 重複を消去したデータを、df_3_distinctとします 重複レコード数の確認 # もとのデータ数 - 重複消去後のデータ数 = 重複データ数 nrow(df_3) - n_distinct(df_3) [1] 113 df_3_distinct &lt;- df_3 %&gt;% distinct() nrow(df_3_distinct) [1] 887 2.3.5 参考１：複数カラムデータの重複消去 たとえば左のような複数カラムデータがあるとします カラムcol_1の重複しているレコードを消去するには、distinctの引数に重複消去するカラム名を与えます d # A tibble: 4 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 a 東京 2 2 a 滋賀 3 2 b 大阪 4 2 a 滋賀 d %&gt;% distinct(col_1) # A tibble: 2 x 1 col_1 &lt;dbl&gt; 1 1 2 2 カラムcol_2, col_3が消えてしまいました。 引数.keep_all = TRUEとすることによって、重複消去したカラム以外のカラムも残すことができます。 d # A tibble: 4 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 a 東京 2 2 a 滋賀 3 2 b 大阪 4 2 a 滋賀 d %&gt;% distinct(col_1, .keep_all = TRUE) # A tibble: 2 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 a 東京 2 2 a 滋賀 複数のカラムを引数に与えると、与えたカラムのレコードの積集合が重複していた時、レコードが消去されます d # A tibble: 4 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 a 東京 2 2 a 滋賀 3 2 b 大阪 4 2 a 滋賀 d %&gt;% distinct(col_1, col_2, col_3) # A tibble: 3 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 1 a 東京 2 2 a 滋賀 3 2 b 大阪 2.4 ステップ４：カラムの選択 select 2.4.1 作業内容 c2のデータから必要なカラムのみを抽出します c2_201901 %&gt;% glimpse() Rows: 2,111 Columns: 11 $ 企業コード &lt;chr&gt; &quot;G92155635&quot;, &quot;G92155065&quot;, &quot;G92143569&quot;, &quot;G... $ 本社所在地市区郡 &lt;chr&gt; &quot;01103_北海道札幌市東区&quot;, &quot;13113_東京都渋谷区&quot;, &quot;01104_北海道... $ 業種大分類 &lt;chr&gt; &quot;G:卸売・小売業，飲食&quot;, &quot;H:金融・保険業&quot;, &quot;G:卸売・小売業，飲食&quot;,... $ `資本金(千円)` &lt;dbl&gt; 862800, 3997800, 830800, 981800, 419100, ... $ 従業員数 &lt;dbl&gt; 114, 2270, 627, 194, 267, 435, 745, 7207... $ 最新期業績決算期年 &lt;dbl&gt; 2018, 2018, 2018, 2018, 2018, 2018, 2018, 201... $ 最新期業績決算期月 &lt;dbl&gt; 3, 3, 3, 3, 2, 3, 3, 3, 3, 12, 3, 3, 3, 12, 3... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 19509, 127123, 35949, 100, 42211, 18093, 82001,... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 539348, 4389077, -18044, 631424, 252220, 88283, ... $ 創業年 &lt;dbl&gt; 1946, 0, 1932, 1917, 0, 1943, 0, 0, 0, ... $ 設立年 &lt;dbl&gt; 1951, 1948, 1951, 1951, 1971, 1946, 192... 2.4.2 必要なカラム 必要なカラムは次の6つです 企業コード 本社所在地市区郡 業種大分類 従業員数 最新期業績売上高(百万円) 最新期業績税引後利益(千円) 今c2データにあるカラムは以下の11個です c2_201901 %&gt;% colnames() [1] &quot;企業コード&quot; &quot;本社所在地市区郡&quot; [3] &quot;業種大分類&quot; &quot;資本金(千円)&quot; [5] &quot;従業員数&quot; &quot;最新期業績決算期年&quot; [7] &quot;最新期業績決算期月&quot; &quot;最新期業績売上高(百万円)&quot; [9] &quot;最新期業績税引後利益(千円)&quot; &quot;創業年&quot; [11] &quot;設立年&quot; 2.4.3 selectでカラムの選択 データとカラム名をselectの引数に渡すことで、データから選択したカラムを抽出することができます c2_201901 %&gt;% select(&quot;企業コード&quot;, &quot;本社所在地市区郡&quot;, &quot;業種大分類&quot;, &quot;従業員数&quot;, `最新期業績売上高(百万円)`, `最新期業績税引後利益(千円)`) %&gt;% glimpse() Rows: 2,111 Columns: 6 $ 企業コード &lt;chr&gt; &quot;G92155635&quot;, &quot;G92155065&quot;, &quot;G92143569&quot;, &quot;G... $ 本社所在地市区郡 &lt;chr&gt; &quot;01103_北海道札幌市東区&quot;, &quot;13113_東京都渋谷区&quot;, &quot;01104_北海道... $ 業種大分類 &lt;chr&gt; &quot;G:卸売・小売業，飲食&quot;, &quot;H:金融・保険業&quot;, &quot;G:卸売・小売業，飲食&quot;,... $ 従業員数 &lt;dbl&gt; 114, 2270, 627, 194, 267, 435, 745, 7207... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 19509, 127123, 35949, 100, 42211, 18093, 82001,... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 539348, 4389077, -18044, 631424, 252220, 88283, ... 変数を選択したデータをc2_201901_selectedとします c2_201901_selected &lt;- c2_201901 %&gt;% select(&quot;企業コード&quot;, &quot;本社所在地市区郡&quot;, &quot;業種大分類&quot;, &quot;従業員数&quot;, `最新期業績売上高(百万円)`, `最新期業績税引後利益(千円)`) c2_201901_selected # A tibble: 2,111 x 6 企業コード 本社所在地市区郡 業種大分類 従業員数 `最新期業績売上高(百万円)`~ &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 01103_北海道札幌市東区~ G:卸売・小売業，~ 114 19509 2 G92155065 13113_東京都渋谷区~ H:金融・保険業~ 2270 127123 3 G92143569 01104_北海道札幌市白石区~ G:卸売・小売業，~ 627 35949 4 G92141220 01101_北海道札幌市中央区~ E:建設業 194 100 5 G92190707 01109_北海道札幌市手稲区~ G:卸売・小売業，~ 267 42211 6 G92515950 01105_北海道札幌市豊平区~ F:製造業 435 18093 7 G92508571 27128_大阪府大阪市中央区~ F:製造業 745 82001 8 G92559088 01101_北海道札幌市中央区~ K:電気・ガス・水~ 7207 100 9 G92552130 01104_北海道札幌市白石区~ E:建設業 1409 23288 10 G92557890 01110_北海道札幌市清田区~ F:製造業 295 61249 # ... with 2,101 more rows, and 1 more variable: # `最新期業績税引後利益(千円)` &lt;dbl&gt; 2.4.4 参考１：不要な読み込みはしない 不要カラムが事前に分かっている場合は、(特に大規模データでは)データ読み込み時点で対処した方が効率的です # 不要なカラムはcol_skip()として読み込まないようにする c2_201901_selected &lt;- read_csv( here(&quot;input/企業概要データ_2019年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = cols( 企業コード = col_character(), 本社所在地市区郡 = col_character(), 業種大分類 = col_character(), `資本金(千円)` = col_double(), 従業員数 = col_double(), 最新期業績決算期年 = col_skip(), # 不要 最新期業績決算期月 = col_skip(), # 不要 `最新期業績売上高(百万円)` = col_double(), `最新期業績税引後利益(千円)` = col_double(), 創業年 = col_skip(), # 不要 設立年 = col_skip() # 不要 ) ) 2.4.5 参考２：ベクトルで変数の選択 want_var &lt;- c(&quot;col_1&quot;, &quot;col_2&quot;) d %&gt;% select(any_of(want_var)) d %&gt;% select(all_of(want_var)) 上記のようにカラムをベクトルで選択することもできますが、any_ofとall_ofを使い分ける必要があります any_of カラム名ベクトルに含まれるカラムを選択します 存在しないカラムがあってもエラーになりません all_of カラム名ベクトルの全てのカラムを選択します 存在しないカラムがある場合はエラーになります 次頁で例を示します。 any_ofは存在しないカラムがあってもエラーが出ない want_var &lt;- c(&quot;企業コード&quot;, &quot;従業員数&quot;, &quot;企業規模&quot;) c2_201901 %&gt;% select(any_of(want_var)) %&gt;% head(2) # A tibble: 2 x 2 企業コード 従業員数 &lt;chr&gt; &lt;dbl&gt; 1 G92155635 114 2 G92155065 2270 all_ofは存在しないカラムがあるとエラーが出る want_var &lt;- c(&quot;企業コード&quot;, &quot;従業員数&quot;, &quot;企業規模&quot;) c2_201901 %&gt;% select(all_of(want_var)) %&gt;% head(2) Error: Can&#39;t subset columns that don&#39;t exist. x Column `企業規模` doesn&#39;t exist. 2.4.6 参考３：変数消去 選択した変数を消去したい場合は、変数名にマイナスをつけて ー変数名と書きます d # A tibble: 3 x 3 x y z &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 1 4 7 2 2 5 8 3 3 6 9 d %&gt;% select(-&quot;y&quot;, -&quot;z&quot;) # A tibble: 3 x 1 x &lt;int&gt; 1 1 2 2 3 3 ベクトルで変数消去することも可能です マイナスはall_ofかany_ofの前につけます d # A tibble: 3 x 3 x y z &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 1 4 7 2 2 5 8 3 3 6 9 del_var &lt;- c(&quot;y&quot;, &quot;z&quot;) d %&gt;% select(-all_of(del_var)) # A tibble: 3 x 1 x &lt;int&gt; 1 1 2 2 3 3 2.4.7 参考４：クォート selectにおいて、カラム名はクォーテーションで囲んでも、囲まなくてもOKです ただしカラム名に括弧がある場合などは例外で、バッククォート「`」で囲む必要があります カラム名の括弧がコードの括弧と混同するのを防ぐためです c2_201901 %&gt;% select(企業コード, &quot;従業員数&quot;, `最新期業績売上高(百万円)`) %&gt;% head(3) # A tibble: 3 x 3 企業コード 従業員数 `最新期業績売上高(百万円)` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 114 19509 2 G92155065 2270 127123 3 G92143569 627 35949 2.5 ステップ５：データの横結合 left_join 2.5.1 作業内容 ステップ3と4で作成した以下の2つのデータを、企業コードをキーにして結合(joinやmergeとも言う)します df_3_distinct # A tibble: 887 x 1 企業コード &lt;chr&gt; 1 J31299770 2 E32002046 3 D42585413 4 J39971897 5 J93122775 6 J34719839 7 L12571447 8 D42395106 9 J34594067 10 E32304350 # ... with 877 more rows c2_201901_selected # A tibble: 2,111 x 7 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 01103_北海道札幌市東区~ G:卸売・小売業，~ 862800 114 2 G92155065 13113_東京都渋谷区~ H:金融・保険業~ 3997800 2270 3 G92143569 01104_北海道札幌市白石区~ G:卸売・小売業，~ 830800 627 4 G92141220 01101_北海道札幌市中央区~ E:建設業 981800 194 5 G92190707 01109_北海道札幌市手稲区~ G:卸売・小売業，~ 419100 267 6 G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 7 G92508571 27128_大阪府大阪市中央区~ F:製造業 53879600 745 8 G92559088 01101_北海道札幌市中央区~ K:電気・ガス・水~ 27874600 7207 9 G92552130 01104_北海道札幌市白石区~ E:建設業 3275400 1409 10 G92557890 01110_北海道札幌市清田区~ F:製造業 3815700 295 # ... with 2,101 more rows, and 2 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt; 2.5.2 いろいろな結合方法 left_join left_join right_join full_join inner_join anti_join 2.5.3 left_joinのイメージ 色付きカラムが企業コードだと思ってください。 left_joinでは第一引数の行を全て保持します 第二引数の行は、キーが第一引数と一致した行のみ残します 第二引数のカラムは、キーが一致しない場合NAとなります 2.5.4 結合する方法を決める df_3_distinctの企業コードに対してc2のデータを紐づけたいので、ここではleft_joinを使って結合します df_3_distinct # A tibble: 887 x 1 企業コード &lt;chr&gt; 1 J31299770 2 E32002046 3 D42585413 4 J39971897 5 J93122775 6 J34719839 7 L12571447 8 D42395106 9 J34594067 10 E32304350 # ... with 877 more rows c2_201901_selected # A tibble: 2,111 x 7 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 01103_北海道札幌市東区~ G:卸売・小売業，~ 862800 114 2 G92155065 13113_東京都渋谷区~ H:金融・保険業~ 3997800 2270 3 G92143569 01104_北海道札幌市白石区~ G:卸売・小売業，~ 830800 627 4 G92141220 01101_北海道札幌市中央区~ E:建設業 981800 194 5 G92190707 01109_北海道札幌市手稲区~ G:卸売・小売業，~ 419100 267 6 G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 7 G92508571 27128_大阪府大阪市中央区~ F:製造業 53879600 745 8 G92559088 01101_北海道札幌市中央区~ K:電気・ガス・水~ 27874600 7207 9 G92552130 01104_北海道札幌市白石区~ E:建設業 3275400 1409 10 G92557890 01110_北海道札幌市清田区~ F:製造業 3815700 295 # ... with 2,101 more rows, and 2 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt; 2.5.5 left_joinでデータの結合 キーとするカラムは引数byで指定します ジョインしたデータをdata_1とします data_1 &lt;- df_3_distinct %&gt;% left_join(c2_201901_selected, by = &quot;企業コード&quot;) data_1 %&gt;% glimpse() Rows: 887 Columns: 7 $ 企業コード &lt;chr&gt; &quot;J31299770&quot;, &quot;E32002046&quot;, &quot;D42585413&quot;, &quot;J... $ 本社所在地市区郡 &lt;chr&gt; &quot;13103_東京都港区&quot;, &quot;27123_大阪府大阪市淀川区&quot;, &quot;13103_東京都... $ 業種大分類 &lt;chr&gt; &quot;I:不動産業&quot;, &quot;L:サービス業&quot;, &quot;J:運輸・通信業&quot;, &quot;L:サービス業... $ `資本金(千円)` &lt;dbl&gt; 931300, 1098300, 6120900, 15432800, 99049... $ 従業員数 &lt;dbl&gt; 64, 1120, 216, 31059, 314, 1167, 880, 15... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 6555, 100, 31746, 334093, 69308, 54667, 107643,... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 910536, 1775694, 408523, 2544502, 763986, 319544... 2.5.6 参考：right_join 引数に与えるデータの順番を変えれば、right_joinを使っても、先ほどと同様の結合をすることができます left_joinとright_joinは混在させないようにしましょう（混在すると可読性が下がってしまうため） c2_201901_selected %&gt;% right_join(df_3_distinct, by = &quot;企業コード&quot;) %&gt;% glimpse() Rows: 887 Columns: 7 $ 企業コード &lt;chr&gt; &quot;G92155065&quot;, &quot;G92515950&quot;, &quot;G92543356&quot;, &quot;G... $ 本社所在地市区郡 &lt;chr&gt; &quot;13113_東京都渋谷区&quot;, &quot;01105_北海道札幌市豊平区&quot;, &quot;01101_北海... $ 業種大分類 &lt;chr&gt; &quot;H:金融・保険業&quot;, &quot;F:製造業&quot;, &quot;E:建設業&quot;, &quot;F:製造業&quot;, &quot;G... $ `資本金(千円)` &lt;dbl&gt; 3997800, 399000, 252800, 16500900, 931630... $ 従業員数 &lt;dbl&gt; 2270, 435, 903, 1278, 455, 2547, 606, 80... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 127123, 18093, 16223, 112638, 361158, 116457, 1... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 4389077, 88283, 515387, 442755, 12313348, 537846... 2.6 箸休めスライド relocate Tabキーで補完 2.6.1 relocateでカラムを少しだけ並び替え relocateは選択したカラムを先頭に移動できる関数です data_1で従業員数カラムは4番目にありますが、従業員数カラムに注目したい場合1番目にあると嬉しいです 本資料では見栄えのために今後使用していきます data_1 %&gt;% head(3) # A tibble: 3 x 7 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 J31299770 13103_東京都港区 I:不動産業 931300 64 2 E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 1098300 1120 3 D42585413 13103_東京都港区 J:運輸・通信業~ 6120900 216 # ... with 2 more variables: `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt; data_1 %&gt;% head(3) %&gt;% relocate(従業員数) # A tibble: 3 x 7 従業員数 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 64 J31299770 13103_東京都港区 I:不動産業 931300 2 1120 E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 1098300 3 216 D42585413 13103_東京都港区 J:運輸・通信業~ 6120900 # ... with 2 more variables: `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt; 2.6.2 Tabキーで補完入力 関数内でTabキー(またはctrl + space)を押すと、使用できる引数候補が表示され引数の説明も表示してくれます データにあるカラム名もTabで参照できます またクォーテーション内でTABキーを押すと、作業ディレクトリのファイルやフォルダを参照できます "],["book_02_beginner_2nd_half.html", "3 初級編後半 作業の確認 3.1 ステップ６：カラム操作の基本 3.2 ステップ７：カラムの新設 3.3 ステップ８：マスタの結合 3.4 ステップ９：文字列の結合 3.5 ステップ１０：指標の作成 3.6 ステップ１１：条件分岐処理 3.7 ステップ１２：ソート 3.8 ステップ１３：グループ集計 3.9 ステップ１４：条件抽出 3.10 ステップ１５：ファイル出力 おわり", " 3 初級編後半 作業の確認 研磨ストーリー 顧客から受領した企業リストに対して企業概要データを付与し、データの集計表や指標を算出して顧客へ渡します。 作業イメージ 添えてある数字が各ステップに対応しています。 前半の成果物 企業コードをキーにしてdf_3_distinctとc2_201901_selectedを結合したdata_1を作成しました。 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #qxyxgabknq .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 18px; font-weight: normal; font-style: normal; background-color: white; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #qxyxgabknq .gt_heading { background-color: white; text-align: center; border-bottom-color: white; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qxyxgabknq .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: white; border-bottom-width: 0; } #qxyxgabknq .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: white; border-top-width: 0; } #qxyxgabknq .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qxyxgabknq .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qxyxgabknq .gt_col_heading { color: #333333; background-color: white; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #qxyxgabknq .gt_column_spanner_outer { color: #333333; background-color: white; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #qxyxgabknq .gt_column_spanner_outer:first-child { padding-left: 0; } #qxyxgabknq .gt_column_spanner_outer:last-child { padding-right: 0; } #qxyxgabknq .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #qxyxgabknq .gt_group_heading { padding: 8px; color: #333333; background-color: white; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #qxyxgabknq .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: white; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #qxyxgabknq .gt_from_md > :first-child { margin-top: 0; } #qxyxgabknq .gt_from_md > :last-child { margin-bottom: 0; } #qxyxgabknq .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #qxyxgabknq .gt_stub { color: #333333; background-color: white; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #qxyxgabknq .gt_summary_row { color: #333333; background-color: white; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qxyxgabknq .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #qxyxgabknq .gt_grand_summary_row { color: #333333; background-color: white; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qxyxgabknq .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #qxyxgabknq .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #qxyxgabknq .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qxyxgabknq .gt_footnotes { color: #333333; background-color: white; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qxyxgabknq .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #qxyxgabknq .gt_sourcenotes { color: #333333; background-color: white; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qxyxgabknq .gt_sourcenote { font-size: 90%; padding: 4px; } #qxyxgabknq .gt_left { text-align: left; } #qxyxgabknq .gt_center { text-align: center; } #qxyxgabknq .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #qxyxgabknq .gt_font_normal { font-weight: normal; } #qxyxgabknq .gt_font_bold { font-weight: bold; } #qxyxgabknq .gt_font_italic { font-style: italic; } #qxyxgabknq .gt_super { font-size: 65%; } #qxyxgabknq .gt_footnote_marks { font-style: italic; font-size: 65%; } data_1 企業コード 本社所在地市区郡 業種大分類 資本金(千円) 従業員数 最新期業績売上高(百万円) 最新期業績税引後利益(千円) J31299770 13103_東京都港区 I:不動産業 931300 64 6555 910536 E32002046 27123_大阪府大阪市淀川区 L:サービス業 1098300 1120 100 1775694 D42585413 13103_東京都港区 J:運輸・通信業 6120900 216 31746 408523 J39971897 13101_東京都千代田区 L:サービス業 15432800 31059 334093 2544502 J93122775 14102_神奈川県横浜市神奈川区 F:製造業 9904900 314 69308 763986 J34719839 13111_東京都大田区 F:製造業 27761400 1167 54667 31954410 L12571447 23105_愛知県名古屋市中村区 G:卸売・小売業，飲食 131800 880 107643 7455793 D42395106 13103_東京都港区 G:卸売・小売業，飲食 1523000 1555 65714 1387429 J34594067 13103_東京都港区 E:建設業 8297700 452 63388 2149032 E32304350 27126_大阪府大阪市平野区 F:製造業 458000 801 40125 530833 K01110418 13102_東京都中央区 F:製造業 11610300 365 44279 2804433 E32110564 27104_大阪府大阪市此花区 F:製造業 9146900 486 71359 6506672 E12517408 28201_兵庫県姫路市 E:建設業 1132800 79 20300 1600471 E32113347 27127_大阪府大阪市北区 G:卸売・小売業，飲食 4053400 302 96496 913238 J30505243 13103_東京都港区 H:金融・保険業 1448400 346 10969 22448 J34873560 12227_千葉県浦安市 G:卸売・小売業，飲食 4569300 204 22993 1415250 J39977283 13103_東京都港区 G:卸売・小売業，飲食 246000 1338 24184 225865 B02122602 34207_広島県福山市 J:運輸・通信業 45597500 13645 100 11584519 J34529468 13104_東京都新宿区 F:製造業 3166100 895 26787 261723 J36362624 13113_東京都渋谷区 L:サービス業 14780400 1054 33010 4750633 J34598062 13109_東京都品川区 F:製造業 10348100 673 49987 1589201 J34789669 22206_静岡県三島市 F:製造業 655500 162 1237 1844422 D82177528 11102_埼玉県さいたま市北区 G:卸売・小売業，飲食 11203800 3828 325136 24136962 E62123226 28110_兵庫県神戸市中央区 J:運輸・通信業 37907900 3025 152859 27785573 J34109661 13101_東京都千代田区 F:製造業 31451600 3413 461075 63185341 L82121236 24216_三重県伊賀市 F:製造業 4035100 216 40114 2272837 J34124165 13102_東京都中央区 H:金融・保険業 9860900 368 8612 914978 E32995244 27113_大阪府大阪市西淀川区 F:製造業 1371100 332 6355 1005090 D42265223 14102_神奈川県横浜市神奈川区 G:卸売・小売業，飲食 4215900 970 60473 995979 J34881765 13101_東京都千代田区 F:製造業 518000 1062 65101 732120 E32523679 27127_大阪府大阪市北区 K:電気・ガス・水道・ 274560500 39916 2639445 191071717 D42093690 11219_埼玉県上尾市 F:製造業 2387500 367 45837 540698 J34512464 13107_東京都墨田区 F:製造業 9345600 1013 26587 1352980 E32119566 27227_大阪府東大阪市 F:製造業 4827300 274 12865 7773787 J34803363 13106_東京都台東区 F:製造業 5229900 113 19812 1599935 E42159736 25201_滋賀県大津市 F:製造業 38393900 825 153467 54729062 F92118101 20380_長野県上伊那郡 F:製造業 1800900 602 15863 119657 J34161865 13108_東京都江東区 E:建設業 587600 876 29707 585028 J36287728 13113_東京都渋谷区 L:サービス業 1661000 521 34446 6019471 J34887367 14207_神奈川県茅ヶ崎市 F:製造業 21189400 734 119784 7205311 B42504542 34102_広島県広島市東区 G:卸売・小売業，飲食 14969400 1828 549883 44261837 J32201436 13101_東京都千代田区 J:運輸・通信業 3065900 15 59626 186881 J34381066 13102_東京都中央区 G:卸売・小売業，飲食 1593300 357 12778 793484 E32129109 28202_兵庫県尼崎市 F:製造業 8152300 249 25256 3228269 J34751865 13102_東京都中央区 F:製造業 4389400 746 33832 783540 E42768626 26102_京都府京都市上京区 F:製造業 3143100 332 8744 3152288 E30971315 27128_大阪府大阪市中央区 G:卸売・小売業，飲食 740000 33 18699 539378 J34887766 13103_東京都港区 F:製造業 28245200 536 396128 7942273 F12183760 15106_新潟県新潟市南区 G:卸売・小売業，飲食 31079600 4521 349321 8512802 E32794904 13108_東京都江東区 H:金融・保険業 21939800 363 5028 532019 D42069420 14133_神奈川県川崎市中原区 L:サービス業 278500 343 14507 1276802 J34940466 13101_東京都千代田区 F:製造業 82935900 4890 987787 21213347 E42556694 26106_京都府京都市下京区 L:サービス業 979200 760 8556 458470 E32147647 27106_大阪府大阪市西区 F:製造業 7838500 519 138481 6237376 D42029989 14103_神奈川県横浜市西区 G:卸売・小売業，飲食 10240500 573 140672 2555513 D22165655 12217_千葉県柏市 L:サービス業 601800 733 23109 4859821 J34731169 13113_東京都渋谷区 J:運輸・通信業 231966200 1754 255394 67533788 B42539783 13101_東京都千代田区 H:金融・保険業 153828200 1649 100 42189533 E82193579 27144_大阪府堺市西区 G:卸売・小売業，飲食 24150700 2466 466759 10237832 F82182020 16201_富山県富山市 K:電気・ガス・水道・ 92062900 6839 193174 -2695387 E32110345 13101_東京都千代田区 G:卸売・小売業，飲食 295027000 3376 5297577 293330719 L42491454 23106_愛知県名古屋市中区 E:建設業 252600 159 21383 808944 L02645617 13101_東京都千代田区 L:サービス業 24249100 1900 3269 1881133 J34983560 12204_千葉県船橋市 F:製造業 1413700 143 6505 -540851 E42659133 26106_京都府京都市下京区 L:サービス業 244300 228 20908 204122 J34171568 13102_東京都中央区 G:卸売・小売業，飲食 4030700 1114 35323 794562 J34647365 13101_東京都千代田区 E:建設業 1390600 685 4378 1394617 C82153425 43105_熊本県熊本市北区 F:製造業 3261100 1649 78346 7435384 J34414704 13111_東京都大田区 L:サービス業 4975400 63 23586 6180762 E32693531 28204_兵庫県西宮市 G:卸売・小売業，飲食 4111300 888 296682 3943989 J34601863 13113_東京都渋谷区 F:製造業 6416100 1507 98350 3038153 J34549760 13111_東京都大田区 F:製造業 45665700 34617 2161788 180020060 C42110360 40132_福岡県福岡市博多区 L:サービス業 2198900 194 36462 3031812 E32046058 27128_大阪府大阪市中央区 F:製造業 8339300 1235 31980 4160782 E12598679 28110_兵庫県神戸市中央区 F:製造業 11966400 2544 128762 29605632 L42193204 23109_愛知県名古屋市熱田区 K:電気・ガス・水道・ 39941000 2872 607757 4146133 B12117505 13101_東京都千代田区 F:製造業 9343000 1085 183683 34137854 F22112890 15205_新潟県柏崎市 F:製造業 586500 4343 84669 5415627 L42120327 23228_愛知県岩倉市 F:製造業 7717900 463 62486 590755 J34891260 13104_東京都新宿区 G:卸売・小売業，飲食 11709600 276 128887 3059422 E32159275 27128_大阪府大阪市中央区 G:卸売・小売業，飲食 7208800 239 243582 6248179 K22100903 33202_岡山県倉敷市 F:製造業 1794300 440 14785 3020310 J30218155 13101_東京都千代田区 L:サービス業 6192100 120 96094 19960809 E32546894 28204_兵庫県西宮市 F:製造業 1585900 273 12567 1265389 J30572230 13101_東京都千代田区 I:不動産業 2342600 11 22639 2552005 D42029780 14102_神奈川県横浜市神奈川区 G:卸売・小売業，飲食 1 8 64475 346674 L42179046 23102_愛知県名古屋市東区 G:卸売・小売業，飲食 12163200 4798 567262 13507229 E62597994 28206_兵庫県芦屋市 F:製造業 7014300 246 22666 2952611 L42862459 23108_愛知県名古屋市瑞穂区 I:不動産業 2536000 466 24333 870778 L42105263 23115_愛知県名古屋市名東区 G:卸売・小売業，飲食 2264700 219 21756 -1646919 E32297874 27128_大阪府大阪市中央区 J:運輸・通信業 266500 276 15604 808139 J30660549 13102_東京都中央区 F:製造業 7808400 308 260044 5362516 E32035549 13103_東京都港区 G:卸売・小売業，飲食 30488600 843 1083467 3113049 J34500137 13103_東京都港区 F:製造業 1 43 17870 1966574 E38816281 27128_大阪府大阪市中央区 J:運輸・通信業 13100 506 19350 1631730 D22716170 12106_千葉県千葉市美浜区 G:卸売・小売業，飲食 146800 720 545 -28674 E32153587 27106_大阪府大阪市西区 G:卸売・小売業，飲食 1 163 403477 11550152 E62173130 28102_兵庫県神戸市灘区 G:卸売・小売業，飲食 435100 130 59614 348188 L42191630 23105_愛知県名古屋市中村区 G:卸売・小売業，飲食 8694900 4775 5991945 68601228 E62567837 28101_兵庫県神戸市東灘区 G:卸売・小売業，飲食 929500 883 78181 256179 3.1 ステップ６：カラム操作の基本 mutate 3.1.1 作業内容 mutateを使ったカラム操作方法を習得します。 tibble(a = 1:3) %&gt;% mutate(b = a*2, c = a+b, d = log(a), e = exp(a), f = cumsum(a), g = na_if(a, 2), h = lead(a), i = lag(a)) %&gt;% glimpse() Rows: 3 Columns: 9 $ a &lt;int&gt; 1, 2, 3 $ b &lt;dbl&gt; 2, 4, 6 $ c &lt;dbl&gt; 3, 6, 9 $ d &lt;dbl&gt; 0.0000000, 0.6931472, 1.0986123 $ e &lt;dbl&gt; 2.718282, 7.389056, 20.085537 $ f &lt;int&gt; 1, 3, 6 $ g &lt;int&gt; 1, NA, 3 $ h &lt;int&gt; 2, 3, NA $ i &lt;int&gt; NA, 1, 2 3.1.2 mutateの基本 mutateは、データに新しいカラムを追加する関数です data %&gt;% mutate(カラム名定義 = 値定義)と書きます 元のデータ d &lt;- tibble( col_1 = c(1, 2, 3) ) d # A tibble: 3 x 1 col_1 &lt;dbl&gt; 1 1 2 2 3 3 データにカラムを追加 vec &lt;- c(2, 4, 6) d$col_2 &lt;- vec # 普通のやり方 d &lt;- d %&gt;% # dplyr mutate(col_3 = vec) d # A tibble: 3 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 2 2 2 2 4 4 3 3 6 6 既存のカラムに操作を加えたカラムも作成可能です 同じカラム名の場合は上書きされます mutate内では、カンマで続けてカラムを追加できます 既存カラムを操作して追加 d &lt;- d %&gt;% mutate( col_4 = col_1 + col_2 ) d # A tibble: 3 x 4 col_1 col_2 col_3 col_4 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 2 2 3 2 2 4 4 6 3 3 6 6 9 既存カラムを操作し上書き d &lt;- d %&gt;% mutate( col_1 = log(col_1), col_2 = exp(col_2)) d # A tibble: 3 x 4 col_1 col_2 col_3 col_4 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 0 7.39 2 3 2 0.693 54.6 4 6 3 1.10 403. 6 9 3.1.3 mutateの使用例 たとえば、最新期売上高の単位は百万円になっていますが、この単位を千円に変換したカラムを作る操作は以下のようにして行います selectとheadは見やすさのために使用しています data_1 %&gt;% select(`最新期業績売上高(百万円)`) %&gt;% mutate(最新期売上高_千円=`最新期業績売上高(百万円)`*1000)%&gt;% head(3) # A tibble: 3 x 2 `最新期業績売上高(百万円)` 最新期売上高_千円 &lt;dbl&gt; &lt;dbl&gt; 1 6555 6555000 2 100 100000 3 31746 31746000 3.1.4 補足 select同様に、括弧つきカラム名は「`」で囲みます 値定義の部分に既存のカラム名を入力する際、カラム名を「\"\"」で囲むと文字列だと認識してしまいます d &lt;- tibble( `(col_1)` = 1:3) d # A tibble: 3 x 1 `(col_1)` &lt;int&gt; 1 1 2 2 3 3 d %&gt;% mutate( col_2 = `(col_1)`*10, col_3 = &quot;(col_1)&quot;) # A tibble: 3 x 3 `(col_1)` col_2 col_3 &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; 1 1 10 (col_1) 2 2 20 (col_1) 3 3 30 (col_1) 3.2 ステップ７：カラムの新設 mutate substr 3.2.1 作業内容 mutateを使用して、以下のように、「都道府県コード」カラムを新設しましょう 都道府県コードは「本社所在地市区郡」の頭2文字です 文字列を部分的に切り取る方法がわかれば、mutateを使って都道府県コードカラムが新設できます したがって、まずは文字列の部分抽出方法を説明します # A tibble: 5 x 8 都道府県コード 本社所在地市区郡 企業コード 業種大分類 `資本金(千円)` &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 13 13103_東京都港区 J31299770 I:不動産業 931300 2 27 27123_大阪府大阪市淀川区~ E32002046 L:サービス業~ 1098300 3 13 13103_東京都港区 D42585413 J:運輸・通信業~ 6120900 4 13 13101_東京都千代田区~ J39971897 L:サービス業~ 15432800 5 14 14102_神奈川県横浜市神奈~ J93122775 F:製造業 9904900 # ... with 3 more variables: 従業員数 &lt;dbl&gt;, # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt; 3.2.2 substrで文字列の部分抽出 substrは、文字列のi番目からj番目までを抽出することができる関数です substr(&quot;文字列&quot;, i, j) 例１ substr(&quot;123456789&quot;, 1, 5) [1] &quot;12345&quot; 例２ &quot;東京都豊島区&quot; %&gt;% substr(4,6) [1] &quot;豊島区&quot; substrという関数名は、sub string（部分文字列）に由来します。 3.2.3 都道府県コードカラムの新設 それではmutateとsubstrを使って都道府県コードのカラムを新設しましょう 都道府県コードは、本社所在地市区郡の頭2文字です カラムを追加したデータをdata_2とします data_2 &lt;- data_1 %&gt;% mutate(都道府県コード = substr(本社所在地市区郡, 1, 2)) data_2 %&gt;% relocate(都道府県コード, 本社所在地市区郡) # A tibble: 887 x 8 都道府県コード 本社所在地市区郡 企業コード 業種大分類 `資本金(千円)` &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 13 13103_東京都港区 J31299770 I:不動産業 931300 2 27 27123_大阪府大阪市淀川区~ E32002046 L:サービス業~ 1098300 3 13 13103_東京都港区 D42585413 J:運輸・通信業~ 6120900 4 13 13101_東京都千代田区~ J39971897 L:サービス業~ 15432800 5 14 14102_神奈川県横浜市神奈~ J93122775 F:製造業 9904900 6 13 13111_東京都大田区~ J34719839 F:製造業 27761400 7 23 23105_愛知県名古屋市中村~ L12571447 G:卸売・小売業，~ 131800 8 13 13103_東京都港区 D42395106 G:卸売・小売業，~ 1523000 9 13 13103_東京都港区 J34594067 E:建設業 8297700 10 27 27126_大阪府大阪市平野区~ E32304350 F:製造業 458000 # ... with 877 more rows, and 3 more variables: 従業員数 &lt;dbl&gt;, # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt; 3.3 ステップ８：マスタの結合 rename left_join 3.3.1 作業内容 data_2に、「都道府県マスタ」データを、都道府県コードをキーとして結合します data_2 # A tibble: 887 x 8 都道府県コード 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 13 J31299770 13103_東京都港区 I:不動産業 931300 2 27 E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 1098300 3 13 D42585413 13103_東京都港区 J:運輸・通信業~ 6120900 4 13 J39971897 13101_東京都千代田区~ L:サービス業~ 15432800 5 14 J93122775 14102_神奈川県横浜市神奈~ F:製造業 9904900 6 13 J34719839 13111_東京都大田区~ F:製造業 27761400 7 23 L12571447 23105_愛知県名古屋市中村~ G:卸売・小売業，~ 131800 8 13 D42395106 13103_東京都港区 G:卸売・小売業，~ 1523000 9 13 J34594067 13103_東京都港区 E:建設業 8297700 10 27 E32304350 27126_大阪府大阪市平野区~ F:製造業 458000 # ... with 877 more rows, and 3 more variables: 従業員数 &lt;dbl&gt;, # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt; 都道府県マスタ # A tibble: 47 x 2 都道府県CODE 都道府県名 &lt;chr&gt; &lt;chr&gt; 1 01 北海道 2 02 青森県 3 03 岩手県 4 04 宮城県 5 05 秋田県 6 06 山形県 7 07 福島県 8 08 茨城県 9 09 栃木県 10 10 群馬県 # ... with 37 more rows 3.3.2 都道府県マスタの読み込み まずは都道府県マスタを読み込みます 0落ちしないようにカラム型を文字列と指定します ken_mst &lt;- read_csv(here(&quot;input/都道府県マスタ.csv&quot;), col_types = cols( &quot;都道府県CODE&quot; = col_character(), &quot;都道府県名&quot; = col_character()), locale=locale(encoding=&quot;shift-jis&quot;)) ken_mst %&gt;% glimpse() Rows: 47 Columns: 2 $ 都道府県CODE &lt;chr&gt; &quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;, &quot;06&quot;, &quot;07&quot;, &quot;08&quot;, &quot;09&quot;, &quot;1... $ 都道府県名 &lt;chr&gt; &quot;北海道&quot;, &quot;青森県&quot;, &quot;岩手県&quot;, &quot;宮城県&quot;, &quot;秋田県&quot;, &quot;山形県&quot;, &quot;福島県&quot;, &quot;茨城県&quot;, &quot;... 3.3.3 data_2にken_mstを結合（失敗） data_2 %&gt;% left_join(ken_mst, by = &quot;都道府県コード&quot;) Error: Join columns must be present in data. x Problem with `都道府県コード`. 都道府県コードをキーにしましたが、都道府県マスタにあるカラムは都道府県CODEとなっているためerrorが出てしまいました このような場合、次の2通りの対処方法があります どちらかのデータのカラム名を変更して、キーにするカラム名を統一する データごとにキーにするカラムを指定する 先にカラム名を変更する対処法を説明して、次にデータごとにキーにするカラムを指定する対処法を説明します。 3.3.4 renameでカラム名の変更 mutateと同様にして記述し、カラム名の変更ができます d %&gt;% rename(&quot;新カラム名&quot; = 旧カラム名) # 元の模擬データ d &lt;- tibble( col_1 = 1:2, `(col_2)` = 3:4) d # A tibble: 2 x 2 col_1 `(col_2)` &lt;int&gt; &lt;int&gt; 1 1 3 2 2 4 # カラム名を変更 d &lt;- d %&gt;% rename( &quot;Col1&quot; = col_1, &quot;Col2&quot; = `(col_2)`) d # A tibble: 2 x 2 Col1 Col2 &lt;int&gt; &lt;int&gt; 1 1 3 2 2 4 3.3.5 data_2にken_mstをジョイン（成功） 都道府県マスタの「都道府県CODE」カラムを「都道府県コード」に変更してからleft_joinを行います data_3 &lt;- data_2 %&gt;% left_join( # 関数の引数内でもパイプを使えます ken_mst %&gt;% rename(&quot;都道府県コード&quot; = 都道府県CODE), by = &quot;都道府県コード&quot;) data_3 %&gt;% glimpse() Rows: 887 Columns: 9 $ 企業コード &lt;chr&gt; &quot;J31299770&quot;, &quot;E32002046&quot;, &quot;D42585413&quot;, &quot;J... $ 本社所在地市区郡 &lt;chr&gt; &quot;13103_東京都港区&quot;, &quot;27123_大阪府大阪市淀川区&quot;, &quot;13103_東京都... $ 業種大分類 &lt;chr&gt; &quot;I:不動産業&quot;, &quot;L:サービス業&quot;, &quot;J:運輸・通信業&quot;, &quot;L:サービス業... $ `資本金(千円)` &lt;dbl&gt; 931300, 1098300, 6120900, 15432800, 99049... $ 従業員数 &lt;dbl&gt; 64, 1120, 216, 31059, 314, 1167, 880, 15... $ `最新期業績売上高(百万円)` &lt;dbl&gt; 6555, 100, 31746, 334093, 69308, 54667, 107643,... $ `最新期業績税引後利益(千円)` &lt;dbl&gt; 910536, 1775694, 408523, 2544502, 763986, 319544... $ 都道府県コード &lt;chr&gt; &quot;13&quot;, &quot;27&quot;, &quot;13&quot;, &quot;13&quot;, &quot;14&quot;, &quot;13&quot;, &quot;23&quot;, &quot;... $ 都道府県名 &lt;chr&gt; &quot;東京都&quot;, &quot;大阪府&quot;, &quot;東京都&quot;, &quot;東京都&quot;, &quot;神奈川県&quot;, &quot;東京都&quot;... 3.3.6 不一致なカラム名をキーにする方法 結論から書くと、以下のようにして書きます data_3 &lt;- data_2 %&gt;% left_join(ken_mst, by = c(&quot;都道府県コード&quot;=&quot;都道府県CODE&quot;)) byで指定しているキーの順番は引数の順番に対応します つまり、「data_2は都道府県コード」、「ken_mstは都道府県CODE」をキーにするという指定を行っています 結合後のキーカラムは“都道府県コード”のみが残ります 結果は先ほどと同じなので省略します data_2とken_mstをジョインしたものをdata_3とします 3.3.7 補足 キーを別々に指定する方法は著者自身も最初は知らず、helpファイルに以下の記述があったので知りました # if the join variables have different names band_members %&gt;% full_join(band_instruments2, by = c(&quot;name&quot; = &quot;artist&quot;)) # Note that only the key from the LHS is kept 不一致キーの問題はrenameでも対処できましたが、renameせずにjoinする方法がないかが気になりました 関数を調べるときはまずhelpファイルを見ましょう 導入編でも述べましたが、Rでは?left_join()のように、?を関数の前につけることでhelpファイルが見れます 3.4 ステップ９：文字列の結合 paste 3.4.1 作業内容 data_3に「都道府県」カラムを新設します 都道府県カラムは、都道府県コードと都道府県名の間に「_」を入れた「01_北海道」のようなデータです 文字列を結合する方法がわかればmutateでできます したがって、まずは文字列の結合方法を説明します # A tibble: 887 x 10 都道府県 都道府県コード 都道府県名 企業コード 本社所在地市区郡 業種大分類 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 13_東京都~ 13 東京都 J31299770 13103_東京都港区 I:不動産業 2 27_大阪府~ 27 大阪府 E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 3 13_東京都~ 13 東京都 D42585413 13103_東京都港区 J:運輸・通信業~ 4 13_東京都~ 13 東京都 J39971897 13101_東京都千代田区~ L:サービス業~ 5 14_神奈川県~ 14 神奈川県 J93122775 14102_神奈川県横浜市神奈~ F:製造業 6 13_東京都~ 13 東京都 J34719839 13111_東京都大田区~ F:製造業 7 23_愛知県~ 23 愛知県 L12571447 23105_愛知県名古屋市中村~ G:卸売・小売業，~ 8 13_東京都~ 13 東京都 D42395106 13103_東京都港区 G:卸売・小売業，~ 9 13_東京都~ 13 東京都 J34594067 13103_東京都港区 E:建設業 10 27_大阪府~ 27 大阪府 E32304350 27126_大阪府大阪市平野区~ F:製造業 # ... with 877 more rows, and 4 more variables: `資本金(千円)` &lt;dbl&gt;, # 従業員数 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt; 3.4.2 pasteで文字列の結合 文字列を結合するにはpaste関数を使います pasteの挙動は以下のようになります paste(&quot;神奈川県&quot;, &quot;横浜市&quot;, sep = &quot;_&quot;) [1] &quot;神奈川県_横浜市&quot; KEN &lt;- &quot;神奈川県&quot; CITY &lt;- &quot;横浜市&quot; TOWN &lt;- &quot;緑区&quot; paste(KEN, CITY, TOWN, sep = &quot;&quot;) [1] &quot;神奈川県横浜市緑区&quot; 3.4.3 都道府県カラムの作成 都道府県カラムは、都道府県コードと都道府県名の間に「_」を入れた「01_北海道」のようなデータです 都道府県カラムを追加したデータをdata_4とします data_4 &lt;- data_3 %&gt;% mutate(都道府県 = paste(都道府県コード, 都道府県名, sep = &quot;_&quot;)) data_4 %&gt;% relocate(都道府県, 都道府県コード, 都道府県名) # A tibble: 887 x 10 都道府県 都道府県コード 都道府県名 企業コード 本社所在地市区郡 業種大分類 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 13_東京都~ 13 東京都 J31299770 13103_東京都港区 I:不動産業 2 27_大阪府~ 27 大阪府 E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 3 13_東京都~ 13 東京都 D42585413 13103_東京都港区 J:運輸・通信業~ 4 13_東京都~ 13 東京都 J39971897 13101_東京都千代田区~ L:サービス業~ 5 14_神奈川県~ 14 神奈川県 J93122775 14102_神奈川県横浜市神奈~ F:製造業 6 13_東京都~ 13 東京都 J34719839 13111_東京都大田区~ F:製造業 7 23_愛知県~ 23 愛知県 L12571447 23105_愛知県名古屋市中村~ G:卸売・小売業，~ 8 13_東京都~ 13 東京都 D42395106 13103_東京都港区 G:卸売・小売業，~ 9 13_東京都~ 13 東京都 J34594067 13103_東京都港区 E:建設業 10 27_大阪府~ 27 大阪府 E32304350 27126_大阪府大阪市平野区~ F:製造業 # ... with 877 more rows, and 4 more variables: `資本金(千円)` &lt;dbl&gt;, # 従業員数 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt; 3.4.4 参考：paste0 paste0関数を使うと、paste関数で引数をsep = \"\"とするのと同様の結果を得ることができます paste0(&quot;神奈川県&quot;, &quot;横浜市&quot;) [1] &quot;神奈川県横浜市&quot; KEN &lt;- &quot;神奈川県&quot; CITY &lt;- &quot;横浜市&quot; TOWN &lt;- &quot;緑区&quot; paste0(KEN, CITY, TOWN) [1] &quot;神奈川県横浜市緑区&quot; 3.5 ステップ１０：指標の作成 mutate 3.5.1 作業内容 指標として売上高利益率を算出します 売上高利益率の計算は、(利益÷売上高)×100です 利益と売上高の単位が揃っていないことに注意します 利益率はround関数で少数点以下2桁にします # A tibble: 887 x 11 売上高利益率 `最新期業績税引後利益(千円)~ `最新期業績売上高(百万円)`~ 企業コード 本社所在地市区郡 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 13.9 910536 6555 J31299770 13103_東京都港区 2 1776. 1775694 100 E32002046 27123_大阪府大阪市淀川区~ 3 1.29 408523 31746 D42585413 13103_東京都港区 4 0.76 2544502 334093 J39971897 13101_東京都千代田区~ 5 1.1 763986 69308 J93122775 14102_神奈川県横浜市神奈~ 6 58.4 31954410 54667 J34719839 13111_東京都大田区~ 7 6.93 7455793 107643 L12571447 23105_愛知県名古屋市中村~ 8 2.11 1387429 65714 D42395106 13103_東京都港区 9 3.39 2149032 63388 J34594067 13103_東京都港区 10 1.32 530833 40125 E32304350 27126_大阪府大阪市平野区~ # ... with 877 more rows, and 6 more variables: 業種大分類 &lt;chr&gt;, # `資本金(千円)` &lt;dbl&gt;, 従業員数 &lt;dbl&gt;, 都道府県コード &lt;chr&gt;, # 都道府県名 &lt;chr&gt;, 都道府県 &lt;chr&gt; 3.5.2 売上高利益率カラムの作成 売上高利益率カラムを追加したものをdata_5とします data_5 &lt;- data_4 %&gt;% mutate(売上高利益率 = `最新期業績税引後利益(千円)`/(`最新期業績売上高(百万円)`*1000)*100) %&gt;% mutate(売上高利益率 = round(売上高利益率, 2)) data_5 %&gt;% relocate(売上高利益率, `最新期業績税引後利益(千円)`, `最新期業績売上高(百万円)`) # A tibble: 887 x 11 売上高利益率 `最新期業績税引後利益(千円)~ `最新期業績売上高(百万円)`~ 企業コード 本社所在地市区郡 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 13.9 910536 6555 J31299770 13103_東京都港区 2 1776. 1775694 100 E32002046 27123_大阪府大阪市淀川区~ 3 1.29 408523 31746 D42585413 13103_東京都港区 4 0.76 2544502 334093 J39971897 13101_東京都千代田区~ 5 1.1 763986 69308 J93122775 14102_神奈川県横浜市神奈~ 6 58.4 31954410 54667 J34719839 13111_東京都大田区~ 7 6.93 7455793 107643 L12571447 23105_愛知県名古屋市中村~ 8 2.11 1387429 65714 D42395106 13103_東京都港区 9 3.39 2149032 63388 J34594067 13103_東京都港区 10 1.32 530833 40125 E32304350 27126_大阪府大阪市平野区~ # ... with 877 more rows, and 6 more variables: 業種大分類 &lt;chr&gt;, # `資本金(千円)` &lt;dbl&gt;, 従業員数 &lt;dbl&gt;, 都道府県コード &lt;chr&gt;, # 都道府県名 &lt;chr&gt;, 都道府県 &lt;chr&gt; 3.6 ステップ１１：条件分岐処理 if_else ifelse case_when 3.6.1 作業内容 従業員数に応じて以下の4つのカテゴリを付与します 従業員数の条件 カテゴリ 0 &lt; 従業員数  500 01_500人以下 500 &lt; 従業員数  1000 02_1000人以下 1000  従業員数 03_1000人超 その他 99_不明 以下のように従業員数レンジが追加できたらOKです これは条件分岐処理を用いて作成することができます # A tibble: 5 x 2 従業員数 従業員数レンジ &lt;dbl&gt; &lt;chr&gt; 1 64 01_500人以下 2 1120 03_1000人超 3 216 01_500人以下 4 31059 03_1000人超 5 314 01_500人以下 3.6.2 if_else, ifelse, case_when 条件分岐処理を行う関数を3つ紹介します if_else ifelse case_when 上から順に処理速度が早いです 分岐させる条件が多いときは、case_whenを使うと可読性が高くなります はじめに簡単な数値例を用いて上記3つの関数の使い方を説明し、その後に従業員数レンジカラムの作成を行います。 3.6.3 if_else, ifelseの使用例 引数名が異なるだけで、記法はほとんど同じです しかし次頁で説明するように、仕様が少しだけ違います # if_else と ifelse の 引数名 if_else(condition= , true= , false= ) ifelse(test= , yes= , no= ) if_else tmp &lt;- c(1, 2, 3) if_else(tmp==2, &quot;yes&quot;,&quot;no&quot;) [1] &quot;no&quot; &quot;yes&quot; &quot;no&quot; ifelse tmp &lt;- c(1, 2, 3) ifelse(tmp==2, &quot;yes&quot;,&quot;no&quot;) [1] &quot;no&quot; &quot;yes&quot; &quot;no&quot; 3.6.4 if_elseはifelseより厳格 if_else(tmp==2, 2, &quot;no&quot;) Error: `false` must be a double vector, not a character vector. ifelse(tmp==2, 2, &quot;no&quot;) [1] &quot;no&quot; &quot;2&quot; &quot;no&quot; if_elseは返り値が同じ型でなければerrorが発生します コンピュータにとっては値の型が最初から決まっている方が楽なので、if_elseはifelseよりも処理が早くなります ifelseは返り値が異なる型でも動きます 結果を見ると、2が文字列に変換されています errorやmessageは出ませんが、返り値の型が自動で変換されてしまうので注意が必要です 本資料ではif_elseを使うことを推奨します。 3.6.5 case_whenの使用例 case_when( 条件式 ~ 返り値, 条件式 ~ 返り値, 条件式 ~ 返り値, ... ) tmp &lt;- c(1, 2, 3) case_when( tmp == 1 ~ &quot;one&quot;, tmp == 2 ~ &quot;two&quot;, TRUE ~ as.character(NA) ) [1] &quot;one&quot; &quot;two&quot; NA 上記のようにして条件式と返り値を複数記述できます 上にある条件式から優先的に値が返ります if_elseと同様に、返り値は同じ型にします どの条件式にも引っかからない場合はNAが返ります したがって、最後の条件は無条件にTRUEとすることがあります 3.6.6 従業員数レンジカラム作成(if_else) if_elseの場合は、条件式に偽となった値にさらに条件分岐をかけることで、条件分岐の階層構造を作ります data_5 %&gt;% mutate(従業員数レンジ = if_else( 0 &lt;= 従業員数 &amp; 従業員数 &lt;= 500, &quot;01_500人以下&quot;, if_else( 500 &lt;= 従業員数 &amp; 従業員数 &lt;= 1000, &quot;02_1000人以下&quot;, if_else(1000 &lt;= 従業員数, &quot;03_1000人超&quot;, &quot;99_不明&quot;)))) %&gt;% relocate(従業員数レンジ, 従業員数) # A tibble: 887 x 12 従業員数レンジ 従業員数 企業コード 本社所在地市区郡 業種大分類 &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 01_500人以下 64 J31299770 13103_東京都港区 I:不動産業 2 03_1000人超 1120 E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 3 01_500人以下 216 D42585413 13103_東京都港区 J:運輸・通信業~ 4 03_1000人超 31059 J39971897 13101_東京都千代田区~ L:サービス業~ 5 01_500人以下 314 J93122775 14102_神奈川県横浜市神奈~ F:製造業 6 03_1000人超 1167 J34719839 13111_東京都大田区~ F:製造業 7 02_1000人以下 880 L12571447 23105_愛知県名古屋市中村~ G:卸売・小売業，~ 8 03_1000人超 1555 D42395106 13103_東京都港区 G:卸売・小売業，~ 9 01_500人以下 452 J34594067 13103_東京都港区 E:建設業 10 02_1000人以下 801 E32304350 27126_大阪府大阪市平野区~ F:製造業 # ... with 877 more rows, and 7 more variables: `資本金(千円)` &lt;dbl&gt;, # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 都道府県 &lt;chr&gt;, # 売上高利益率 &lt;dbl&gt; 3.6.7 従業員数レンジカラム作成(case_when) 今回のように複数分岐の場合、case_whenが便利です 結果は先ほどと同じなので省略します 従業員数レンジを追加したデータをdata_6とします data_6 &lt;- data_5 %&gt;% mutate(従業員数レンジ = case_when( 0 &lt;= 従業員数 &amp; 従業員数 &lt;= 500 ~ &quot;01_500人以下&quot;, 500 &lt;= 従業員数 &amp; 従業員数 &lt;= 1000 ~ &quot;02_1000人以下&quot;, 1000 &lt;= 従業員数 ~ &quot;03_1000人超&quot;, TRUE ~ &quot;99_不明&quot; ) ) 3.6.8 参考：条件式 記号 意味 == イコール != ノットイコール &lt; 未満 &gt; 超過 &gt;= 以上 &lt;= 以下 関数 判定 is.na() NA is.null() NULL is.nan() NaN is.infinite() Inf is.integer() 整数 is.double() 少数 記号 意味 ! not &amp; and | or %in% in 例）%in%はとても便利なので覚えましょう。 # %in%の後ろのベクトルに値が含まれていたらTRUE c(&quot;滋賀&quot;, &quot;彦根&quot;) %in% c(&quot;日本&quot;, &quot;滋賀&quot;, &quot;米原&quot;) [1] TRUE FALSE 3.7 ステップ１２：ソート arrange 3.7.1 作業内容 データをソートをします はじめに都道府県で昇順ソートをし、 つぎに都道府県内での従業員数レンジで昇順ソートをし、 さいごに上記のうちから売上高利益率で降順ソートします # A tibble: 887 x 12 都道府県 従業員数レンジ 売上高利益率 企業コード 本社所在地市区郡 業種大分類 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 01_北海道~ 01_500人以下 3.41 G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 2 01_北海道~ 01_500人以下 0.49 G92515950 01105_北海道札幌市豊平区~ F:製造業 3 01_北海道~ 02_1000人以下 5.05 G22109363 01203_北海道小樽市~ J:運輸・通信業~ 4 01_北海道~ 02_1000人以下 3.18 G92543356 01101_北海道札幌市中央区~ E:建設業 5 01_北海道~ 02_1000人以下 0.570 G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 6 02_青森県~ 01_500人以下 0.96 H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 7 02_青森県~ 02_1000人以下 0.45 H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 8 04_宮城県~ 01_500人以下 3.77 H42536370 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 9 04_宮城県~ 01_500人以下 0.86 H42053936 04104_宮城県仙台市太白区~ G:卸売・小売業，~ 10 04_宮城県~ 02_1000人以下 9.45 H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ # ... with 877 more rows, and 6 more variables: `資本金(千円)` &lt;dbl&gt;, # 従業員数 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 都道府県コード &lt;chr&gt;, # 都道府県名 &lt;chr&gt; 3.7.2 arrangeでソート ソートしたいカラムをarrangeの引数に指定します デフォルトは昇順で、desc関数で降順になります data_6 %&gt;% # 昇順 arrange(都道府県) %&gt;% relocate(都道府県) # A tibble: 887 x 12 都道府県 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 01_北海道~ G22109363 01203_北海道小樽市~ J:運輸・通信業~ 1590700 807 2 01_北海道~ G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 1748600 606 3 01_北海道~ G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 4 01_北海道~ G92543356 01101_北海道札幌市中央区~ E:建設業 252800 903 5 01_北海道~ G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 9316300 455 6 02_青森県~ H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 1247000 288 7 02_青森県~ H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 4006200 571 8 04_宮城県~ H42150036 04101_宮城県仙台市青葉区~ K:電気・ガス・水~ 418451700 5308 9 04_宮城県~ H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1065600 892 10 04_宮城県~ H42536370 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1 303 # ... with 877 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 売上高利益率 &lt;dbl&gt;, # 従業員数レンジ &lt;chr&gt; data_6 %&gt;% # 降順 arrange(desc(都道府県))%&gt;% relocate(都道府県) # A tibble: 887 x 12 都道府県 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 47_沖縄県~ J42113831 47208_沖縄県浦添市~ K:電気・ガス・水~ 11473100 1823 2 46_鹿児島県~ C72124439 46201_鹿児島県鹿児島市~ F:製造業 307700 551 3 45_宮崎県~ C32118312 45202_宮崎県都城市~ G:卸売・小売業，~ 1362500 300 4 43_熊本県~ C82153425 43105_熊本県熊本市北区~ F:製造業 3261100 1649 5 40_福岡県~ C42110360 40132_福岡県福岡市博多区~ L:サービス業~ 2198900 194 6 40_福岡県~ C42151200 40133_福岡県福岡市中央区~ E:建設業 2535100 211 7 40_福岡県~ C92114080 40106_福岡県北九州市小倉~ G:卸売・小売業，~ 8148900 457 8 40_福岡県~ C92180151 40109_福岡県北九州市八幡~ F:製造業 26955300 2463 9 40_福岡県~ C92532200 40109_福岡県北九州市八幡~ L:サービス業~ 95400 538 10 40_福岡県~ C42151408 40134_福岡県福岡市南区~ E:建設業 2698300 11268 # ... with 877 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 売上高利益率 &lt;dbl&gt;, # 従業員数レンジ &lt;chr&gt; 3.7.3 複数カラムでソート 都道府県で昇順ソートし、都道府県内で売上高利益率を降順ソートする場合は以下のように書きます data_6 %&gt;% arrange(都道府県, desc(売上高利益率)) ソート前 # A tibble: 887 x 12 都道府県 売上高利益率 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 13_東京都~ 13.9 J31299770 13103_東京都港区 I:不動産業 931300 2 27_大阪府~ 1776. E32002046 27123_大阪府大阪市淀川区~ L:サービス業~ 1098300 3 13_東京都~ 1.29 D42585413 13103_東京都港区 J:運輸・通信業~ 6120900 4 13_東京都~ 0.76 J39971897 13101_東京都千代田区~ L:サービス業~ 15432800 5 14_神奈川県~ 1.1 J93122775 14102_神奈川県横浜市神奈~ F:製造業 9904900 6 13_東京都~ 58.4 J34719839 13111_東京都大田区~ F:製造業 27761400 7 23_愛知県~ 6.93 L12571447 23105_愛知県名古屋市中村~ G:卸売・小売業，~ 131800 8 13_東京都~ 2.11 D42395106 13103_東京都港区 G:卸売・小売業，~ 1523000 9 13_東京都~ 3.39 J34594067 13103_東京都港区 E:建設業 8297700 10 27_大阪府~ 1.32 E32304350 27126_大阪府大阪市平野区~ F:製造業 458000 # ... with 877 more rows, and 6 more variables: 従業員数 &lt;dbl&gt;, # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 従業員数レンジ &lt;chr&gt; ソート後 # A tibble: 887 x 12 都道府県 売上高利益率 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 01_北海道~ 5.05 G22109363 01203_北海道小樽市~ J:運輸・通信業~ 1590700 2 01_北海道~ 3.41 G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 9316300 3 01_北海道~ 3.18 G92543356 01101_北海道札幌市中央区~ E:建設業 252800 4 01_北海道~ 0.570 G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 1748600 5 01_北海道~ 0.49 G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 6 02_青森県~ 0.96 H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 1247000 7 02_青森県~ 0.45 H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 4006200 8 04_宮城県~ 9.45 H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1065600 9 04_宮城県~ 4.93 H42150249 04102_宮城県仙台市宮城野~ E:建設業 14733200 10 04_宮城県~ 4.45 H42150036 04101_宮城県仙台市青葉区~ K:電気・ガス・水~ 418451700 # ... with 877 more rows, and 6 more variables: 従業員数 &lt;dbl&gt;, # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 従業員数レンジ &lt;chr&gt; では3つの組み合わせでソートしましょう 都道府県で昇順、従業員数レンジで昇順、売上高利益率で降順の順番で組み合わせてソートします ソートしたデータをdata_7とします data_7 &lt;- data_6 %&gt;% arrange(都道府県, 従業員数レンジ, desc(売上高利益率)) data_7 %&gt;% relocate(都道府県, 従業員数レンジ, 売上高利益率) # A tibble: 887 x 12 都道府県 従業員数レンジ 売上高利益率 企業コード 本社所在地市区郡 業種大分類 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 01_北海道~ 01_500人以下 3.41 G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 2 01_北海道~ 01_500人以下 0.49 G92515950 01105_北海道札幌市豊平区~ F:製造業 3 01_北海道~ 02_1000人以下 5.05 G22109363 01203_北海道小樽市~ J:運輸・通信業~ 4 01_北海道~ 02_1000人以下 3.18 G92543356 01101_北海道札幌市中央区~ E:建設業 5 01_北海道~ 02_1000人以下 0.570 G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 6 02_青森県~ 01_500人以下 0.96 H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 7 02_青森県~ 02_1000人以下 0.45 H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 8 04_宮城県~ 01_500人以下 3.77 H42536370 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 9 04_宮城県~ 01_500人以下 0.86 H42053936 04104_宮城県仙台市太白区~ G:卸売・小売業，~ 10 04_宮城県~ 02_1000人以下 9.45 H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ # ... with 877 more rows, and 6 more variables: `資本金(千円)` &lt;dbl&gt;, # 従業員数 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 都道府県コード &lt;chr&gt;, # 都道府県名 &lt;chr&gt; 3.8 ステップ１３：グループ集計 group_by summarise 3.8.1 作業内容 group_byとsummariseでの集計方法を習得します data_7 %&gt;% group_by(都道府県, 従業員数レンジ) %&gt;% summarise(count = n(), sum = sum(従業員数), mean = mean(従業員数), max = max(従業員数)) # A tibble: 83 x 6 # Groups: 都道府県 [38] 都道府県 従業員数レンジ count sum mean max &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 01_北海道 01_500人以下 2 890 445 455 2 01_北海道 02_1000人以下 3 2316 772 903 3 02_青森県 01_500人以下 1 288 288 288 4 02_青森県 02_1000人以下 1 571 571 571 5 04_宮城県 01_500人以下 2 471 236. 303 6 04_宮城県 02_1000人以下 1 892 892 892 7 04_宮城県 03_1000人超 2 10454 5227 5308 8 07_福島県 01_500人以下 1 192 192 192 9 08_茨城県 02_1000人以下 1 525 525 525 10 08_茨城県 03_1000人超 2 4315 2158. 2463 # ... with 73 more rows 3.8.2 group_byとsummariseでの集計方法 ここでは都道府県ごとにグループ化して、都道府県ごとの従業員数の平均値を算出します group_byの引数にグループ化する変数を与えます summariseはmutateと同様に書き、集計値を算出します data_7 %&gt;% group_by(都道府県) %&gt;% summarise( 従業員数平均=mean(従業員数) ) # A tibble: 38 x 2 都道府県 従業員数平均 * &lt;chr&gt; &lt;dbl&gt; 1 01_北海道 641. 2 02_青森県 430. 3 04_宮城県 2363. 4 07_福島県 192 5 08_茨城県 1613. 6 09_栃木県 178 7 10_群馬県 1118. 8 11_埼玉県 928. 9 12_千葉県 873. 10 13_東京都 1545. # ... with 28 more rows 3.8.3 複数カラムでグループ集計 group_byの引数にカラム名を複数与えることで、複数グループでの集計ができるようになります # 都道府県かつ従業員数レンジごとに従業員数平均を算出 data_7 %&gt;% group_by(都道府県, 従業員数レンジ) %&gt;% summarise(従業員数平均 = mean(従業員数)) # A tibble: 83 x 3 # Groups: 都道府県 [38] 都道府県 従業員数レンジ 従業員数平均 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 01_北海道 01_500人以下 445 2 01_北海道 02_1000人以下 772 3 02_青森県 01_500人以下 288 4 02_青森県 02_1000人以下 571 5 04_宮城県 01_500人以下 236. 6 04_宮城県 02_1000人以下 892 7 04_宮城県 03_1000人超 5227 8 07_福島県 01_500人以下 192 9 08_茨城県 02_1000人以下 525 10 08_茨城県 03_1000人超 2158. # ... with 73 more rows 3.8.4 参考１：mutateとの違い mutateでは既存のtibbleに対してグループ集計値が格納されるので、同じ値が複数行に入ります data_7 %&gt;% group_by(都道府県, 従業員数レンジ) %&gt;% mutate(従業員数平均 = mean(従業員数)) %&gt;% relocate(都道府県, 従業員数レンジ, 従業員数平均, 従業員数) # A tibble: 887 x 13 # Groups: 都道府県, 従業員数レンジ [83] 都道府県 従業員数レンジ 従業員数平均 従業員数 企業コード 本社所在地市区郡 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 01_北海道~ 01_500人以下 445 455 G92668203 01104_北海道札幌市白石区~ 2 01_北海道~ 01_500人以下 445 435 G92515950 01105_北海道札幌市豊平区~ 3 01_北海道~ 02_1000人以下 772 807 G22109363 01203_北海道小樽市~ 4 01_北海道~ 02_1000人以下 772 903 G92543356 01101_北海道札幌市中央区~ 5 01_北海道~ 02_1000人以下 772 606 G92412006 01101_北海道札幌市中央区~ 6 02_青森県~ 01_500人以下 288 288 H02154711 02202_青森県弘前市~ 7 02_青森県~ 02_1000人以下 571 571 H92112963 02203_青森県八戸市~ 8 04_宮城県~ 01_500人以下 236. 303 H42536370 04102_宮城県仙台市宮城野~ 9 04_宮城県~ 01_500人以下 236. 168 H42053936 04104_宮城県仙台市太白区~ 10 04_宮城県~ 02_1000人以下 892 892 H42127369 04102_宮城県仙台市宮城野~ # ... with 877 more rows, and 7 more variables: 業種大分類 &lt;chr&gt;, # `資本金(千円)` &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 都道府県コード &lt;chr&gt;, # 都道府県名 &lt;chr&gt;, 売上高利益率 &lt;dbl&gt; 3.8.5 参考２：グループごとのレコード数を集計 summariseでn()を用いてレコード数を集計できます n()はsummariseの中で使える特殊な関数です data_7 %&gt;% group_by(都道府県) %&gt;% summarise(count = n()) # A tibble: 887 x 12 都道府県 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 01_北海道~ G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 9316300 455 2 01_北海道~ G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 3 01_北海道~ G22109363 01203_北海道小樽市~ J:運輸・通信業~ 1590700 807 4 01_北海道~ G92543356 01101_北海道札幌市中央区~ E:建設業 252800 903 5 01_北海道~ G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 1748600 606 6 02_青森県~ H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 1247000 288 7 02_青森県~ H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 4006200 571 8 04_宮城県~ H42536370 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1 303 9 04_宮城県~ H42053936 04104_宮城県仙台市太白区~ G:卸売・小売業，~ 1966400 168 10 04_宮城県~ H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1065600 892 # ... with 877 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 売上高利益率 &lt;dbl&gt;, # 従業員数レンジ &lt;chr&gt; # A tibble: 38 x 2 都道府県 count * &lt;chr&gt; &lt;int&gt; 1 01_北海道 5 2 02_青森県 2 3 04_宮城県 5 4 07_福島県 1 5 08_茨城県 3 6 09_栃木県 1 7 10_群馬県 5 8 11_埼玉県 15 9 12_千葉県 15 10 13_東京都 466 # ... with 28 more rows 別の方法として、group_byしたデータをcount()しても同様な結果を得ることができます data_7 %&gt;% group_by(都道府県) %&gt;% count() # A tibble: 887 x 12 都道府県 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 01_北海道~ G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 9316300 455 2 01_北海道~ G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 3 01_北海道~ G22109363 01203_北海道小樽市~ J:運輸・通信業~ 1590700 807 4 01_北海道~ G92543356 01101_北海道札幌市中央区~ E:建設業 252800 903 5 01_北海道~ G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 1748600 606 6 02_青森県~ H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 1247000 288 7 02_青森県~ H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 4006200 571 8 04_宮城県~ H42536370 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1 303 9 04_宮城県~ H42053936 04104_宮城県仙台市太白区~ G:卸売・小売業，~ 1966400 168 10 04_宮城県~ H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1065600 892 # ... with 877 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 売上高利益率 &lt;dbl&gt;, # 従業員数レンジ &lt;chr&gt; # A tibble: 38 x 2 # Groups: 都道府県 [38] 都道府県 n &lt;chr&gt; &lt;int&gt; 1 01_北海道 5 2 02_青森県 2 3 04_宮城県 5 4 07_福島県 1 5 08_茨城県 3 6 09_栃木県 1 7 10_群馬県 5 8 11_埼玉県 15 9 12_千葉県 15 10 13_東京都 466 # ... with 28 more rows 3.8.6 参考３：ピボットテーブル データの横持ち変換（中級編で説明）を行えば、ピボットテーブル形式にもできます data_7 %&gt;% group_by(都道府県, 従業員数レンジ) %&gt;% summarise(従業員数平均 = mean(従業員数)) %&gt;% pivot_wider(names_from = &quot;従業員数レンジ&quot;, values_from = &quot;従業員数平均&quot;, values_fill=0) # A tibble: 38 x 4 # Groups: 都道府県 [38] 都道府県 `01_500人以下` `02_1000人以下` `03_1000人超` &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 01_北海道 445 772 0 2 02_青森県 288 571 0 3 04_宮城県 236. 892 5227 4 07_福島県 192 0 0 5 08_茨城県 0 525 2158. 6 09_栃木県 178 0 0 7 10_群馬県 192. 0 4822 8 11_埼玉県 211. 672. 3029. 9 12_千葉県 225. 733 2959. 10 13_東京都 221. 723. 3592. # ... with 28 more rows 3.9 ステップ１４：条件抽出 filter 3.9.1 作業内容 特定の条件を満たすレコードをデータから抽出します たとえば、売上高利益率がマイナスの企業は、filterを使って以下のようにして抽出できます data_7 %&gt;% filter(売上高利益率&lt;0) %&gt;% relocate(売上高利益率) # A tibble: 887 x 12 売上高利益率 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 3.41 G92668203 01104_北海道札幌市白石区~ G:卸売・小売業，~ 9316300 455 2 0.49 G92515950 01105_北海道札幌市豊平区~ F:製造業 399000 435 3 5.05 G22109363 01203_北海道小樽市~ J:運輸・通信業~ 1590700 807 4 3.18 G92543356 01101_北海道札幌市中央区~ E:建設業 252800 903 5 0.570 G92412006 01101_北海道札幌市中央区~ G:卸売・小売業，~ 1748600 606 6 0.96 H02154711 02202_青森県弘前市~ G:卸売・小売業，~ 1247000 288 7 0.45 H92112963 02203_青森県八戸市~ G:卸売・小売業，~ 4006200 571 8 3.77 H42536370 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1 303 9 0.86 H42053936 04104_宮城県仙台市太白区~ G:卸売・小売業，~ 1966400 168 10 9.45 H42127369 04102_宮城県仙台市宮城野~ G:卸売・小売業，~ 1065600 892 # ... with 877 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 都道府県 &lt;chr&gt;, # 従業員数レンジ &lt;chr&gt; # A tibble: 53 x 12 売上高利益率 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 -3.44 H72516758 07203_福島県郡山市~ F:製造業 6134400 192 2 -1.15 D82130703 11102_埼玉県さいたま市北~ G:卸売・小売業，~ 1 206 3 -14.0 B92598280 11221_埼玉県草加市~ G:卸売・小売業，~ 2334500 29 4 -1.48 D22802868 12106_千葉県千葉市美浜区~ G:卸売・小売業，~ 1619500 83 5 -8.31 J34983560 12204_千葉県船橋市~ F:製造業 1413700 143 6 -5.26 D22716170 12106_千葉県千葉市美浜区~ G:卸売・小売業，~ 146800 720 7 -0.08 J33168656 13109_東京都品川区~ J:運輸・通信業~ 263200 16 8 -0.1 J39262517 13101_東京都千代田区~ G:卸売・小売業，~ 1859600 139 9 -0.13 J31728828 13116_東京都豊島区~ G:卸売・小売業，~ 528500 408 10 -0.27 J33707893 13116_東京都豊島区~ F:製造業 1281800 498 # ... with 43 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県名 &lt;chr&gt;, 都道府県 &lt;chr&gt;, # 従業員数レンジ &lt;chr&gt; 3.9.2 filterで条件抽出 filterの引数に条件式を与えることで、条件式に真であるレコードのみを抽出することができます（条件式link） data_7 %&gt;% filter(都道府県名==&quot;大阪府&quot;) %&gt;% relocate(都道府県名) # A tibble: 123 x 12 都道府県名 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 大阪府 E32510267 27106_大阪府大阪市西区~ E:建設業 4497700 167 2 大阪府 E32119566 27227_大阪府東大阪市~ F:製造業 4827300 274 3 大阪府 E32012305 27128_大阪府大阪市中央区~ F:製造業 7518400 347 4 大阪府 E32427103 27127_大阪府大阪市北区~ F:製造業 2410500 388 5 大阪府 E32995244 27113_大阪府大阪市西淀川~ F:製造業 1371100 332 6 大阪府 E32656531 27128_大阪府大阪市中央区~ F:製造業 3426900 217 7 大阪府 E12576662 27123_大阪府大阪市淀川区~ L:サービス業~ 935400 391 8 大阪府 E38927358 27128_大阪府大阪市中央区~ I:不動産業 3098700 140 9 大阪府 E62112080 27128_大阪府大阪市中央区~ F:製造業 3295700 378 10 大阪府 E38334059 27106_大阪府大阪市西区~ G:卸売・小売業，~ 335700 74 # ... with 113 more rows, and 6 more variables: # `最新期業績売上高(百万円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県 &lt;chr&gt;, 売上高利益率 &lt;dbl&gt;, # 従業員数レンジ &lt;chr&gt; 3.9.3 複数条件で抽出 少し複雑な条件であったり、複数の条件を組み合わせたレコード抽出でもfilterで対処できます たとえば、次のような条件に合致する企業のレコードを抽出する手順を順に追ってみましょう 売上高利益率が10%以上、または売上高が1兆円以上 東京、または大阪の企業である 従業員数が50人未満である 売上高利益率が10%以上、または売上高が1兆円以上の企業のレコードを抽出します（「または」は「|」） data_7 %&gt;% filter(売上高利益率&gt;=10 | `最新期業績売上高(百万円)`&gt;10**6) %&gt;% relocate(売上高利益率, `最新期業績売上高(百万円)`) # A tibble: 239 x 12 売上高利益率 `最新期業績売上高(百万円)`~ 企業コード 本社所在地市区郡 業種大分類 &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 10.1 13524 D82183414 11105_埼玉県さいたま市中~ F:製造業 2 41.6 21267 D82325861 11107_埼玉県さいたま市浦~ G:卸売・小売業，~ 3 17.4 37081 D82402989 11211_埼玉県本庄市~ I:不動産業 4 10.3 34488 J34003761 11206_埼玉県行田市~ F:製造業 5 15.8 3415 D22182297 12213_千葉県東金市~ J:運輸・通信業~ 6 14.8 10957 D22153185 12224_千葉県鎌ケ谷市~ J:運輸・通信業~ 7 21.0 23109 D22165655 12217_千葉県柏市 L:サービス業~ 8 3890. 100 J34860668 13101_東京都千代田区~ F:製造業 9 301. 12830 J33209601 13116_東京都豊島区~ L:サービス業~ 10 230. 4960 J34732870 13109_東京都品川区~ I:不動産業 # ... with 229 more rows, and 7 more variables: `資本金(千円)` &lt;dbl&gt;, # 従業員数 &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, 都道府県コード &lt;chr&gt;, # 都道府県名 &lt;chr&gt;, 都道府県 &lt;chr&gt;, 従業員数レンジ &lt;chr&gt; 先ほどの条件に加えて、東京or大阪の企業であるという条件を追加します（%in% ~で、~に含まれてればTRUE） data_7 %&gt;% filter(売上高利益率&gt;=10 | `最新期業績売上高(百万円)`&gt;10**6, 都道府県名 %in% c(&quot;東京都&quot;, &quot;大阪府&quot;)) %&gt;% relocate(売上高利益率, `最新期業績売上高(百万円)`, 都道府県名) # A tibble: 165 x 12 売上高利益率 `最新期業績売上高(百万円)`~ 都道府県名 企業コード 本社所在地市区郡 &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 3890. 100 東京都 J34860668 13101_東京都千代田区~ 2 301. 12830 東京都 J33209601 13116_東京都豊島区~ 3 230. 4960 東京都 J34732870 13109_東京都品川区~ 4 123. 1115 東京都 J36311119 13101_東京都千代田区~ 5 81.2 5905 東京都 J34353008 13103_東京都港区 6 72.2 15374 東京都 J33418285 13101_東京都千代田区~ 7 54.3 1116 東京都 J31963141 13104_東京都新宿区~ 8 42.4 8029 東京都 J31486759 13101_東京都千代田区~ 9 36.8 3316 東京都 J36322142 13113_東京都渋谷区~ 10 36.0 29345 東京都 J33003842 13101_東京都千代田区~ # ... with 155 more rows, and 7 more variables: 業種大分類 &lt;chr&gt;, # `資本金(千円)` &lt;dbl&gt;, 従業員数 &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県 &lt;chr&gt;, 従業員数レンジ &lt;chr&gt; 先ほどの条件に加えて、従業員数が50人未満の企業であるという条件を追加します data_7 %&gt;% filter(売上高利益率&gt;=10 | `最新期業績売上高(百万円)`&gt;10**6, 都道府県名 %in% c(&quot;東京都&quot;, &quot;大阪府&quot;)) %&gt;% filter(従業員数 &lt; 50) %&gt;% relocate(売上高利益率, `最新期業績売上高(百万円)`, 都道府県名, 従業員数) # A tibble: 10 x 12 売上高利益率 `最新期業績売上高(百万円)`~ 都道府県名 従業員数 企業コード &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; 1 230. 4960 東京都 35 J34732870 2 81.2 5905 東京都 33 J34353008 3 54.3 1116 東京都 22 J31963141 4 26.9 151194 東京都 24 J34020161 5 24.0 36479 東京都 48 J34014761 6 17.2 10673 東京都 39 J22144564 7 14.6 10133 東京都 16 J34338556 8 11.3 22639 東京都 11 J30572230 9 11 17870 東京都 43 J34500137 10 12.6 24151 大阪府 1 E38259980 # ... with 7 more variables: 本社所在地市区郡 &lt;chr&gt;, 業種大分類 &lt;chr&gt;, # `資本金(千円)` &lt;dbl&gt;, `最新期業績税引後利益(千円)` &lt;dbl&gt;, # 都道府県コード &lt;chr&gt;, 都道府県 &lt;chr&gt;, 従業員数レンジ &lt;chr&gt; 3.10 ステップ１５：ファイル出力 write_csv 3.10.1 作業内容 作成したデータをcsv形式で出力し保存します データを保存する前にデータの見栄えを整えましょう 見栄えを整えるために次の2つの作業を行います 不要な変数の消去 カラムの並び替え 見栄えを整えたらcsvで保存します 3.10.2 不要な変数の消去 処理の過程で発生した不要な変数を消去します 消去する変数は、“本社所在地市区郡”, “都道府県コード”, “都道府県名”の3つです 初級編前半で説明したように、selectでー変数名とすることで変数消去できます 不要な変数を消去したデータをdata_8とします data_8 &lt;- data_7 %&gt;% select(-&quot;本社所在地市区郡&quot;, -&quot;都道府県コード&quot;, -&quot;都道府県名&quot;) data_8 %&gt;% colnames() [1] &quot;企業コード&quot; &quot;業種大分類&quot; [3] &quot;資本金(千円)&quot; &quot;従業員数&quot; [5] &quot;最新期業績売上高(百万円)&quot; &quot;最新期業績税引後利益(千円)&quot; [7] &quot;都道府県&quot; &quot;売上高利益率&quot; [9] &quot;従業員数レンジ&quot; 3.10.3 カラムの並び替え 並び変えたい順番でカラム名をselectすることで、カラムを並び変えることができます（ここで不要カラムをselectしなければ、変数消去は不要な作業になります） カラムを並び替えたデータをdata_9とします data_9 &lt;- data_8 %&gt;% select(&quot;企業コード&quot;, &quot;都道府県&quot;, &quot;従業員数&quot;, &quot;業種大分類&quot;,&quot;最新期業績売上高(百万円)&quot;, &quot;最新期業績税引後利益(千円)&quot;, &quot;売上高利益率&quot;, &quot;従業員数レンジ&quot;) data_9 %&gt;% colnames() [1] &quot;企業コード&quot; &quot;都道府県&quot; [3] &quot;従業員数&quot; &quot;業種大分類&quot; [5] &quot;最新期業績売上高(百万円)&quot; &quot;最新期業績税引後利益(千円)&quot; [7] &quot;売上高利益率&quot; &quot;従業員数レンジ&quot; 3.10.4 write_csvでcsvファイルの出力 データの見栄えを整え終わったら、write_csvを使ってcsvファイルを出力します 出力先は、outputフォルダとします 第一引数にデータ、第二引数にpathを指定します pathの末端がファイル名となります 拡張子を付けるのを忘れないようにしましょう 出力先フォルダが存在しないとエラーになります encodingはUTF-8になります（現状は変更不可） data_9 %&gt;% write_csv(here(&quot;output/研磨後最終ファイル.csv&quot;)) 3.10.5 参考：ファイル出力のencoding readrパッケージのwrite_csv関数では、encodingは“UTF-8”でしか出力することができません 理由としては恐らく、HTML5などのマークアップ言語との兼ね合いで“UTF-8”が推奨されているからです それでも、“shift-jis”など“UTF-8”以外での出力が求められることもあります 以上の理由から、参考として“UTF-8”以外での出力方法も紹介します base関数のwrite.csv関数を使用することで、“UTF-8”以外でのファイル出力ができます 引数row.namesを必ずFALSEにするようにしましょう tibbleではrow namesは使用されません デフォルトではTRUEになっています 引数fileEncodingで、encodingを指定します data_9 %&gt;% write.csv(here(&quot;output/研磨後最終ファイル.csv&quot;), row.names = FALSE, fileEncoding = &quot;shift-jis&quot;) おわり これで初級編は終了です。お疲れさまでした。 "],["book_03_intermediate_1st_half.html", "4 中級編前半 はじめに 4.1 複数ファイルの一括読み込み(イメージ) 4.2 list 4.3 for文(繰り返し処理) 4.4 複数ファイルの一括読み込み(実装) 4.5 複数データの結合方法 4.6 複数データのタテ結合 4.7 複数データのヨコ結合 4.8 箸休めスライド", " 4 中級編前半 はじめに 中級の作業イメージ 左半分を前半、右半分を後半で進めていきます。 目次（中級前半） 複数ファイルの一括読み込み(イメージ) listの説明 for文の説明 複数ファイルの一括読み込み(実装) 複数データの結合方法 複数データのタテ結合 複数データのヨコ結合 箸休め 4.1 複数ファイルの一括読み込み(イメージ) 複数ファイルを効率よく読み込む方法のイメージを掴んでもらいます 4.1.1 読み込むデータの確認 2012年から2018年の企業概要ファイルを読み込みます 企業概要データ_2012年1月時点.csv 企業概要データ_2013年1月時点.csv 企業概要データ_2014年1月時点.csv 企業概要データ_2015年1月時点.csv 企業概要データ_2016年1月時点.csv 企業概要データ_2017年1月時点.csv 企業概要データ_2018年1月時点.csv 4.1.2 単純な方法 # 読み込むカラム型を決める data_cols &lt;- cols( 企業コード = col_character(), 本社所在地市区郡 = col_character(), 業種大分類 = col_character(), `資本金(千円)` = col_double(), 従業員数 = col_double(), 最新期業績決算期年 = col_double(), 最新期業績決算期月 = col_double(), `最新期業績売上高(百万円)` = col_double(), `最新期業績税引後利益(千円)` = col_double(), 創業年 = col_double(), 設立年 = col_double() ) # 2012年から2018年のデータを別々に読み込む data_2012 &lt;- read_csv(here(&quot;input/企業概要データ_2012年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_2013 &lt;- read_csv(here(&quot;input/企業概要データ_2013年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_2014 &lt;- read_csv(here(&quot;input/企業概要データ_2014年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_2015 &lt;- read_csv(here(&quot;input/企業概要データ_2015年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_2016 &lt;- read_csv(here(&quot;input/企業概要データ_2016年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_2017 &lt;- read_csv(here(&quot;input/企業概要データ_2017年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_2018 &lt;- read_csv(here(&quot;input/企業概要データ_2018年1月時点.csv&quot;), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) このコードでは、書くのが面倒・保守が面倒・変数が無駄に増えるなど、デメリットが多いです 4.1.3 for文を使用する方法 file_vec &lt;- paste0(&quot;input/企業概要データ_&quot;, 2012:2018, &quot;年1月時点.csv&quot;) data_list &lt;- list() for (file in file_vec){ tmp_d &lt;- read_csv(file = here(file), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_list &lt;- append(data_list, list(tmp_d)) } names(data_list) &lt;- paste0(&quot;data_&quot;, 2012:2018) for文とlistを使ったコードでは、書くのが楽・保守が楽・変数の節約などのメリットを享受できます 上記コードのイメージが次頁にあります 4.1.4 for文5ステップのイメージ 4.1.5 for文による繰り返し処理のススメ 一般的に、同様な処理を繰り返して行う際はfor文やmap（上級で解説）を使用してコーディングをします なぜなら、単純な方法で紹介したようなコードでも意図したプログラムを書けますが、コードが冗長になる・メンテナンスに労力がかかるなどのデメリットが多いからです 複数ファイルを読み込むという処理を通して、for文による繰り返し処理を使えるようになりましょう 次頁以降では、複数ファイルの一括読み込みで用いるlistとfor文の使用方法について先に説明した後に、for文を用いた複数ファイル一括読み込みを実装します 4.2 list listの使い方を勉強します 4.2.1 listとは listは一言でいえば拡張されたベクトルで、代表的には次の3つのような利点をもちます ベクトル、データフレームなどを要素にもつことができる listの階層構造を作ることができる 要素の追加や取り出しが容易にできる listは、中級および上級で必須のツールになります listについては以下の要点だけを説明しますが、より詳細な説明は下記リンクなどを参照してください listの作成 listに要素を追加する listの要素にアクセス listの要素に名前をつける listの詳細(https://r4ds.had.co.nz/vectors.html#lists) 4.2.2 listのイメージ 4.2.3 listの作成 listは通常のベクトルとは違い、ベクトルや文字列、データフレームなどを同時に要素に持つことができます tmp_vec &lt;- c(c(2,0,1,8), &quot;滋賀県&quot;) tmp_vec [1] &quot;2&quot; &quot;0&quot; &quot;1&quot; &quot;8&quot; &quot;滋賀県&quot; tmp_list &lt;- list(c(2,0,1,8), &quot;滋賀県&quot;) tmp_list [[1]] [1] 2 0 1 8 [[2]] [1] &quot;滋賀県&quot; 4.2.4 listに要素を追加する append関数でlistに要素を追加できます 第一引数に対象のlist、第二引数に追加要素を要求します tmp_d &lt;- tibble(&quot;企業コード&quot; = 101, &quot;従業員数&quot; = 50) tmp_list &lt;- append(tmp_list, list(tmp_d)) appendまえ [[1]] [1] 2 0 1 8 [[2]] [1] &quot;滋賀県&quot; appendあと [[1]] [1] 2 0 1 8 [[2]] [1] &quot;滋賀県&quot; [[3]] # A tibble: 1 x 2 企業コード 従業員数 &lt;dbl&gt; &lt;dbl&gt; 1 101 50 4.2.5 listの要素にアクセス listの第i番目の要素にアクセスするには、大かっこを2重にして[[i]]と書きます 大かっこが一重だとスライスされたlistが返されます tmp_list [[1]] [1] 2 0 1 8 [[2]] [1] &quot;滋賀県&quot; [[3]] # A tibble: 1 x 2 企業コード 従業員数 &lt;dbl&gt; &lt;dbl&gt; 1 101 50 tmp_list[[2]] # 2つ目の要素 [1] &quot;滋賀県&quot; tmp_list[2] # listをスライス [[1]] [1] &quot;滋賀県&quot; 4.2.6 listの要素アクセスイメージ tmp_list[2]とスライスすると、“滋賀県”が一つ目の要素になるので、[[1]]“滋賀県”となってlistが返されます 4.2.7 listの要素に名前をつける listの要素名の参照・命名にはnames関数を使用します 名前はlistと同じ長さのベクトルで与えます names(tmp_list) &lt;- c(&quot;数列&quot;, &quot;都道府県&quot;, &quot;データ&quot;) 命名まえ [[1]] [1] 2 0 1 8 [[2]] [1] &quot;滋賀県&quot; [[3]] # A tibble: 1 x 2 企業コード 従業員数 &lt;dbl&gt; &lt;dbl&gt; 1 101 50 命名あと $数列 [1] 2 0 1 8 $都道府県 [1] &quot;滋賀県&quot; $データ # A tibble: 1 x 2 企業コード 従業員数 &lt;dbl&gt; &lt;dbl&gt; 1 101 50 4.2.8 listの要素に名前でアクセス listの要素に名前をつけると、以下の2種類の方法で要素名を用いてlistの要素へアクセスできるようになります tmp_list[[&quot;データ&quot;]] # A tibble: 1 x 2 企業コード 従業員数 &lt;dbl&gt; &lt;dbl&gt; 1 101 50 listの要素に名前をつけておくことで、右のように補完入力なども使えるようになります tmp_list$データ # A tibble: 1 x 2 企業コード 従業員数 &lt;dbl&gt; &lt;dbl&gt; 1 101 50 4.3 for文(繰り返し処理) for文の使い方を勉強します 4.3.1 for文イントロダクション 以下は1から3までの数字を順に表示するコードです print(1) print(2) print(3) [1] 1 [1] 2 [1] 3 for (i in 1:3){ print(i) } [1] 1 [1] 2 [1] 3 どちらのコードを書くほうが楽でしょうか？ 数字が1から1000までならどうでしょうか？ このように同様な処理を繰り返し行うときにfor文を使用すると、とても効率的にコーディングができます 4.3.2 for文の使い方 繰り返し範囲に指定したベクトル（リストでも可）の要素が順番に変数に代入されます 各ループにおける処理を、中かっこ{}の中に書きます かっこ()と中かっこ{}を忘れないように注意しましょう for (i in 1:5){ print(i) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 4.3.3 適当な変数名を考える for文で使用する変数には適当な名前をつけましょう 単なる序数の場合などはiやnを使用することが多いです たとえば2012年から2018年までの各年での繰り返し処理を行いたいときは、変数名をyearとするといいでしょう for (year in 2012:2018){ print(paste0(&quot;input/企業概要データ_&quot;,year,&quot;年1月時点.csv&quot;)) } [1] &quot;input/企業概要データ_2012年1月時点.csv&quot; [1] &quot;input/企業概要データ_2013年1月時点.csv&quot; [1] &quot;input/企業概要データ_2014年1月時点.csv&quot; [1] &quot;input/企業概要データ_2015年1月時点.csv&quot; [1] &quot;input/企業概要データ_2016年1月時点.csv&quot; [1] &quot;input/企業概要データ_2017年1月時点.csv&quot; [1] &quot;input/企業概要データ_2018年1月時点.csv&quot; 4.3.4 listとfor文を用いた例 以下のようにしてlistとfor文を共に使うことが多いです items &lt;- c(&quot;ecnomics&quot;, &quot;data science&quot;) # ベクトルを作成 my_list &lt;- list() # 空のlistを作成 for(item in items){ my_list &lt;- append(my_list, list(item)) # 要素を追加 } names(my_list) &lt;- c(&quot;経済&quot;, &quot;データサイエンス&quot;) # 要素に命名 my_list $経済 [1] &quot;ecnomics&quot; $データサイエンス [1] &quot;data science&quot; 上記のコードと同様にして、複数ファイルの一括読み込みも処理できそうです。実際にやってみましょう。 4.4 複数ファイルの一括読み込み(実装) 複数ファイルを効率よく読み込む方法を実装します 4.4.1 for文の5ステップのイメージ(再掲) では5つのステップを順番に実装していきましょう。 4.4.2 for文：ステップ１ はじめに、ファイルのpathベクトルを作成します paste0（paste）関数は数値を入れると文字列に変換されます ベクトルを入れると同じ長さのベクトルで返されます このpathベクトルを繰り返し範囲としてfor文を使います file_vec &lt;- paste0(&quot;input/企業概要データ_&quot;, 2012:2018, &quot;年1月時点.csv&quot;) file_vec [1] &quot;input/企業概要データ_2012年1月時点.csv&quot; [2] &quot;input/企業概要データ_2013年1月時点.csv&quot; [3] &quot;input/企業概要データ_2014年1月時点.csv&quot; [4] &quot;input/企業概要データ_2015年1月時点.csv&quot; [5] &quot;input/企業概要データ_2016年1月時点.csv&quot; [6] &quot;input/企業概要データ_2017年1月時点.csv&quot; [7] &quot;input/企業概要データ_2018年1月時点.csv&quot; 4.4.3 for文：ステップ２ つぎに、読み込んだデータを格納するための空の箱、すなわち空のリストを作成します 空箱の名前はdata_listとします data_list &lt;- list() data_list list() 4.4.4 for文：ステップ３,４,５ 先ほど用意したpathベクトルを繰り返し範囲として、読み込むデータのpathを順番に変数へと与えていきます fileという変数に、file_vecの要素が順番に与えらます 各ループで読み込んだデータをtmp_d（仮データ）とします 読み込んだtmp_dをdata_listに追加します 一度listに追加したtmp_dは不要（上書きok）です for文終了後に、listの要素に名前をつけます for (file in file_vec){ tmp_d &lt;- read_csv(file = here(file), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) data_list &lt;- append(data_list, list(tmp_d)) } names(data_list) &lt;- paste0(&quot;data_&quot;, 2012:2018) 4.4.5 複数ファイル読み込みまとめ # ステップ１：pathベクトルを作成する file_vec &lt;- paste0(&quot;input/企業概要データ_&quot;, 2012:2018,&quot;年1月時点.csv&quot;) # ステップ２：空のlistを作る data_list &lt;- list() for (file in file_vec){ # ステップ３：データを読み込む tmp_d &lt;- read_csv(file = here(file), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) # ステップ４：データをlistに格納する data_list &lt;- append(data_list, list(tmp_d)) } # ステップ５：listの要素に名前を付ける names(data_list) &lt;- paste0(&quot;data_&quot;, 2012:2018) 4.4.6 複数ファイルの一括読み込み結果 データ数が多いので表示はしませんが、コンソールにdata_listと入力すると結果を確認することができます 結果の確認にはglimpse関数やstr関数なども便利です listの要素に命名したので、下図のようにしてもdata_listに2012年から2018年までのデータが格納されていることが確認できます 4.5 複数データの結合方法 タテとヨコ、2種類の結合方法の紹介をします 4.5.1 タテ結合とヨコ結合 複数データの結合には以下の2通りの方法があります bind_rowsでタテに結合 （タテ持ちデータ） joinでヨコに結合 （ヨコ持ちデータ） 先にタテ結合、次にヨコ結合の説明をします 4.6 複数データのタテ結合 タテ結合を実装します 4.6.1 タテ結合結果 結合の際にyearカラムを新設することがポイントです 企業コード, yearの順でソートして表示しています # A tibble: 14,972 x 12 企業コード year 従業員数 本社所在地市区郡 業種大分類 `資本金(千円)` &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02111302 2012 1254 34208_広島県府中市~ F:製造業 11722300 2 B02111302 2013 768 34208_広島県府中市~ F:製造業 9907700 3 B02111302 2014 1242 34208_広島県府中市~ F:製造業 6616800 4 B02111302 2015 1409 34208_広島県府中市~ F:製造業 7218100 5 B02111302 2016 728 34208_広島県府中市~ F:製造業 17733300 6 B02111302 2017 1401 34208_広島県府中市~ F:製造業 7440100 7 B02111302 2018 1096 34208_広島県府中市~ F:製造業 6818500 8 B02117802 2012 82 34207_広島県福山市~ G:卸売・小売業，~ 3556300 9 B02117802 2013 376 34207_広島県福山市~ G:卸売・小売業，~ 1777200 10 B02117802 2014 374 34207_広島県福山市~ G:卸売・小売業，~ 3568300 # ... with 14,962 more rows, and 6 more variables: 最新期業績決算期年 &lt;dbl&gt;, # 最新期業績決算期月 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 創業年 &lt;dbl&gt;, 設立年 &lt;dbl&gt; 4.6.2 タテ結合の手順 for文とmutateを使って、data_listの全てのデータにyearカラムを作成する bind_rowsを使って、data_listのデータをタテ結合する 4.6.3 1. yearカラムの作成 yearカラムを作る理由 data_listの要素名にはyearの情報がありますが、個々のデータにはyearの情報がありません。そのため、このまま縦結合するとyearの情報が抜け落ちたデータになります。 data_listの要素名 [1] &quot;data_2012&quot; &quot;data_2013&quot; &quot;data_2014&quot; &quot;data_2015&quot; &quot;data_2016&quot; &quot;data_2017&quot; [7] &quot;data_2018&quot; 2012年のデータのカラム [1] &quot;企業コード&quot; &quot;本社所在地市区郡&quot; [3] &quot;業種大分類&quot; &quot;資本金(千円)&quot; [5] &quot;従業員数&quot; &quot;最新期業績決算期年&quot; [7] &quot;最新期業績決算期月&quot; &quot;最新期業績売上高(百万円)&quot; [9] &quot;最新期業績税引後利益(千円)&quot; &quot;創業年&quot; [11] &quot;設立年&quot; yearカラムの作成実装（１つ） まずは2012年のデータのみで実装してみましょう コードの汎用性を高めるために、yearカラムの値はdata_listの要素名からとってきます data_year &lt;- names(data_list)[1] %&gt;% substr(6, 9) data_list[[&quot;data_2012&quot;]] &lt;- data_list[[&quot;data_2012&quot;]] %&gt;% mutate(year = data_year) data_list[[&quot;data_2012&quot;]] %&gt;% relocate(year) # データ確認 # A tibble: 2,176 x 12 year 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 2012 G92155635 01103_北海道札幌市東区~ G:卸売・小売業，~ 1419800 197 2 2012 G92155065 13113_東京都渋谷区~ H:金融・保険業~ 8462000 1418 3 2012 G92143569 01104_北海道札幌市白石区~ G:卸売・小売業，~ 370700 535 4 2012 G92190707 01101_北海道札幌市中央区~ G:卸売・小売業，~ 639200 694 5 2012 G92515950 01105_北海道札幌市豊平区~ F:製造業 1958700 840 6 2012 G92508571 27128_大阪府大阪市中央区~ F:製造業 30041600 1436 7 2012 G92559088 01101_北海道札幌市中央区~ K:電気・ガス・水~ 83595900 2814 8 2012 G92552130 01104_北海道札幌市白石区~ E:建設業 2577500 2145 9 2012 G92557890 01110_北海道札幌市清田区~ F:製造業 4217000 461 10 2012 G92556303 01101_北海道札幌市中央区~ K:電気・ガス・水~ 3913100 769 # ... with 2,166 more rows, and 6 more variables: 最新期業績決算期年 &lt;dbl&gt;, # 最新期業績決算期月 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 創業年 &lt;dbl&gt;, 設立年 &lt;dbl&gt; yearカラムの作成実装（すべて） 次は全てのデータに対してyearカラムを作成します 繰返し範囲は、1からdata_listの要素の長さです 毎ループごとにyearの情報を要素名から抜き出し、抜き出したyear情報をdataに付与しています year情報の抜き出しでは、listをスライスしているところに注意してください 前頁との違いは、for文と、要素名がdl_nameになっている部分のみです。結果は省略します for (dl_name in names(data_list)){ data_year &lt;- dl_name %&gt;% substr(6, 9) data_list[[dl_name]] &lt;- data_list[[dl_name]] %&gt;% mutate(year = data_year) } 4.6.4 2. bind_rowsでタテ結合 data_listを直接bind_rows関数にかけるだけで、listに入っているデータをすべてタテ結合することができます タテ結合したデータをlong_dataとします long_data &lt;- data_list %&gt;% bind_rows() long_data %&gt;% relocate(year) %&gt;% arrange(企業コード, year) # A tibble: 14,972 x 12 year 企業コード 本社所在地市区郡 業種大分類 `資本金(千円)` 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 2012 B02111302 34208_広島県府中市~ F:製造業 11722300 1254 2 2013 B02111302 34208_広島県府中市~ F:製造業 9907700 768 3 2014 B02111302 34208_広島県府中市~ F:製造業 6616800 1242 4 2015 B02111302 34208_広島県府中市~ F:製造業 7218100 1409 5 2016 B02111302 34208_広島県府中市~ F:製造業 17733300 728 6 2017 B02111302 34208_広島県府中市~ F:製造業 7440100 1401 7 2018 B02111302 34208_広島県府中市~ F:製造業 6818500 1096 8 2012 B02117802 34207_広島県福山市~ G:卸売・小売業，~ 3556300 82 9 2013 B02117802 34207_広島県福山市~ G:卸売・小売業，~ 1777200 376 10 2014 B02117802 34207_広島県福山市~ G:卸売・小売業，~ 3568300 374 # ... with 14,962 more rows, and 6 more variables: 最新期業績決算期年 &lt;dbl&gt;, # 最新期業績決算期月 &lt;dbl&gt;, `最新期業績売上高(百万円)` &lt;dbl&gt;, # `最新期業績税引後利益(千円)` &lt;dbl&gt;, 創業年 &lt;dbl&gt;, 設立年 &lt;dbl&gt; 4.6.5 補足 初級編の参考で解説しましたが、bind_rowsでの結合は、カラム名が一致するものはカラム名で紐づきます d1 # A tibble: 1 x 2 col_1 col_2 &lt;dbl&gt; &lt;dbl&gt; 1 1 1 d2 # A tibble: 1 x 2 col_2 col_3 &lt;dbl&gt; &lt;dbl&gt; 1 2 2 bind_rows(d1, d2) # A tibble: 2 x 3 col_1 col_2 col_3 &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 1 1 NA 2 NA 2 2 4.6.6 参考 今回のケースでは、データ読み込みの時点で個々のデータにyear情報を付与すると、より効率的になります file_vec &lt;- paste0(&quot;input/企業概要データ_&quot;, 2012:2018,&quot;年1月時点.csv&quot;) data_list &lt;- list() for (file in file_vec){ tmp_d &lt;- read_csv(file = here(file), locale = locale(encoding = &quot;shift-jis&quot;), col_types = data_cols) tmp_d &lt;- tmp_d %&gt;% # ここで読み込んだデータにyear付与 mutate(year = substr(file, 15, 18)) data_list &lt;- append(data_list, list(tmp_d)) } names(data_list) &lt;- paste0(&quot;data_&quot;, 2012:2018) 4.7 複数データのヨコ結合 ヨコ結合を実装します 4.7.1 ヨコ結合結果 カラム名の重複を避けるためとyear情報を保持するために、カラム名にyear情報を付与する部分がポイントです # A tibble: 2,176 x 71 企業コード 業種大分類_2012 業種大分類_2013 業種大分類_2014 業種大分類_2015 業種大分類_2016 業種大分類_2017 業種大分類_2018 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 G92155635 G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ 2 G92155065 H:金融・保険業 H:金融・保険業 H:金融・保険業 H:金融・保険業 H:金融・保険業 H:金融・保険業 H:金融・保険業 3 G92143569 G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ 4 G92190707 G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ G:卸売・小売業，飲食~ 5 G92515950 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 6 G92508571 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 7 G92559088 K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ 8 G92552130 E:建設業 E:建設業 E:建設業 E:建設業 E:建設業 E:建設業 E:建設業 9 G92557890 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 F:製造業 10 G92556303 K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ K:電気・ガス・水道・~ # ... with 2,166 more rows, and 63 more variables: 最新期業績決算期月_2012 &lt;dbl&gt;, 最新期業績決算期月_2013 &lt;dbl&gt;, # 最新期業績決算期月_2014 &lt;dbl&gt;, 最新期業績決算期月_2015 &lt;dbl&gt;, 最新期業績決算期月_2016 &lt;dbl&gt;, 最新期業績決算期月_2017 &lt;dbl&gt;, # 最新期業績決算期月_2018 &lt;dbl&gt;, 最新期業績決算期年_2012 &lt;dbl&gt;, 最新期業績決算期年_2013 &lt;dbl&gt;, 最新期業績決算期年_2014 &lt;dbl&gt;, # 最新期業績決算期年_2015 &lt;dbl&gt;, 最新期業績決算期年_2016 &lt;dbl&gt;, 最新期業績決算期年_2017 &lt;dbl&gt;, 最新期業績決算期年_2018 &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2012` &lt;dbl&gt;, `最新期業績税引後利益(千円)_2013` &lt;dbl&gt;, `最新期業績税引後利益(千円)_2014` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2015` &lt;dbl&gt;, `最新期業績税引後利益(千円)_2016` &lt;dbl&gt;, `最新期業績税引後利益(千円)_2017` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2018` &lt;dbl&gt;, `最新期業績売上高(百万円)_2012` &lt;dbl&gt;, `最新期業績売上高(百万円)_2013` &lt;dbl&gt;, # `最新期業績売上高(百万円)_2014` &lt;dbl&gt;, `最新期業績売上高(百万円)_2015` &lt;dbl&gt;, `最新期業績売上高(百万円)_2016` &lt;dbl&gt;, # `最新期業績売上高(百万円)_2017` &lt;dbl&gt;, `最新期業績売上高(百万円)_2018` &lt;dbl&gt;, `資本金(千円)_2012` &lt;dbl&gt;, `資本金(千円)_2013` &lt;dbl&gt;, # `資本金(千円)_2014` &lt;dbl&gt;, `資本金(千円)_2015` &lt;dbl&gt;, `資本金(千円)_2016` &lt;dbl&gt;, `資本金(千円)_2017` &lt;dbl&gt;, `資本金(千円)_2018` &lt;dbl&gt;, # 従業員数_2012 &lt;dbl&gt;, 従業員数_2013 &lt;dbl&gt;, 従業員数_2014 &lt;dbl&gt;, 従業員数_2015 &lt;dbl&gt;, 従業員数_2016 &lt;dbl&gt;, 従業員数_2017 &lt;dbl&gt;, # 従業員数_2018 &lt;dbl&gt;, 設立年_2012 &lt;dbl&gt;, 設立年_2013 &lt;dbl&gt;, 設立年_2014 &lt;dbl&gt;, 設立年_2015 &lt;dbl&gt;, 設立年_2016 &lt;dbl&gt;, 設立年_2017 &lt;dbl&gt;, # 設立年_2018 &lt;dbl&gt;, 創業年_2012 &lt;dbl&gt;, 創業年_2013 &lt;dbl&gt;, 創業年_2014 &lt;dbl&gt;, 創業年_2015 &lt;dbl&gt;, 創業年_2016 &lt;dbl&gt;, 創業年_2017 &lt;dbl&gt;, # 創業年_2018 &lt;dbl&gt;, 本社所在地市区郡_2012 &lt;chr&gt;, 本社所在地市区郡_2013 &lt;chr&gt;, 本社所在地市区郡_2014 &lt;chr&gt;, 本社所在地市区郡_2015 &lt;chr&gt;, # 本社所在地市区郡_2016 &lt;chr&gt;, 本社所在地市区郡_2017 &lt;chr&gt;, 本社所在地市区郡_2018 &lt;chr&gt; 4.7.2 ヨコ結合の手順 for文とrename_withを使って、data_listの各データのカラム名を適当に変更する for文と*_joinを使って、data_listの全てのデータをヨコ結合する 4.7.3 1. rename_withでカラム名の変更 rename_withは、指定したカラムに対してカラム名変更の処理を一括で行うことができる関数です 企業コードはjoinのキーなので変更しません 例としてdata_2012のカラム名を一括変更します data_list$data_2012 %&gt;% rename_with(.fn = paste0, # renameに使用する関数 .cols = -企業コード, # 対称のカラムを指定 &quot;_&quot;, &quot;2012&quot;) %&gt;% # 上記関数の引数 colnames() [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2012&quot; [3] &quot;業種大分類_2012&quot; &quot;資本金(千円)_2012&quot; [5] &quot;従業員数_2012&quot; &quot;最新期業績決算期年_2012&quot; [7] &quot;最新期業績決算期月_2012&quot; &quot;最新期業績売上高(百万円)_2012&quot; [9] &quot;最新期業績税引後利益(千円)_2012&quot; &quot;創業年_2012&quot; [11] &quot;設立年_2012&quot; ではfor文とrename_withを使って、data_listの各データの変数名を一括変更しましょう for (dl_name in names(data_list)) { data_year &lt;- dl_name %&gt;% substr(6, 9) data_list[[dl_name]] &lt;- data_list[[dl_name]] %&gt;% rename_with(paste0, -企業コード, &quot;_&quot;, data_year) } data_list %&gt;% map(colnames) # map関数の説明は後ほど $data_2012 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2012&quot; [3] &quot;業種大分類_2012&quot; &quot;資本金(千円)_2012&quot; [5] &quot;従業員数_2012&quot; &quot;最新期業績決算期年_2012&quot; [7] &quot;最新期業績決算期月_2012&quot; &quot;最新期業績売上高(百万円)_2012&quot; [9] &quot;最新期業績税引後利益(千円)_2012&quot; &quot;創業年_2012&quot; [11] &quot;設立年_2012&quot; $data_2013 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2013&quot; [3] &quot;業種大分類_2013&quot; &quot;資本金(千円)_2013&quot; [5] &quot;従業員数_2013&quot; &quot;最新期業績決算期年_2013&quot; [7] &quot;最新期業績決算期月_2013&quot; &quot;最新期業績売上高(百万円)_2013&quot; [9] &quot;最新期業績税引後利益(千円)_2013&quot; &quot;創業年_2013&quot; [11] &quot;設立年_2013&quot; $data_2014 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2014&quot; [3] &quot;業種大分類_2014&quot; &quot;資本金(千円)_2014&quot; [5] &quot;従業員数_2014&quot; &quot;最新期業績決算期年_2014&quot; [7] &quot;最新期業績決算期月_2014&quot; &quot;最新期業績売上高(百万円)_2014&quot; [9] &quot;最新期業績税引後利益(千円)_2014&quot; &quot;創業年_2014&quot; [11] &quot;設立年_2014&quot; $data_2015 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2015&quot; [3] &quot;業種大分類_2015&quot; &quot;資本金(千円)_2015&quot; [5] &quot;従業員数_2015&quot; &quot;最新期業績決算期年_2015&quot; [7] &quot;最新期業績決算期月_2015&quot; &quot;最新期業績売上高(百万円)_2015&quot; [9] &quot;最新期業績税引後利益(千円)_2015&quot; &quot;創業年_2015&quot; [11] &quot;設立年_2015&quot; $data_2016 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2016&quot; [3] &quot;業種大分類_2016&quot; &quot;資本金(千円)_2016&quot; [5] &quot;従業員数_2016&quot; &quot;最新期業績決算期年_2016&quot; [7] &quot;最新期業績決算期月_2016&quot; &quot;最新期業績売上高(百万円)_2016&quot; [9] &quot;最新期業績税引後利益(千円)_2016&quot; &quot;創業年_2016&quot; [11] &quot;設立年_2016&quot; $data_2017 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2017&quot; [3] &quot;業種大分類_2017&quot; &quot;資本金(千円)_2017&quot; [5] &quot;従業員数_2017&quot; &quot;最新期業績決算期年_2017&quot; [7] &quot;最新期業績決算期月_2017&quot; &quot;最新期業績売上高(百万円)_2017&quot; [9] &quot;最新期業績税引後利益(千円)_2017&quot; &quot;創業年_2017&quot; [11] &quot;設立年_2017&quot; $data_2018 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2018&quot; [3] &quot;業種大分類_2018&quot; &quot;資本金(千円)_2018&quot; [5] &quot;従業員数_2018&quot; &quot;最新期業績決算期年_2018&quot; [7] &quot;最新期業績決算期月_2018&quot; &quot;最新期業績売上高(百万円)_2018&quot; [9] &quot;最新期業績税引後利益(千円)_2018&quot; &quot;創業年_2018&quot; [11] &quot;設立年_2018&quot; 4.7.4 2. left_joinでヨコ結合 for文を用い、data_2012の企業コードをおおもとのキーとして、すべてのデータを企業コードでleft_joinします 最初はdata_2012自身とleft_joinし、次に2013, 2014,…,2018とleft_joinしていきます 注意点 2012年の企業コードに含まれない企業コードがあるデータ、あるいは2012年の企業コードが存在しないデータは、次のようになります 2012年の企業コードと一致しないデータはjoinされない 2012年の企業コードが無い年ではデータが欠損(NA)となる 実装と確認 wide_data &lt;- data_list[[&quot;data_2012&quot;]] %&gt;% select(企業コード) for (data in data_list) { wide_data &lt;- wide_data %&gt;% left_join(data, by = &quot;企業コード&quot;) } wide_data # A tibble: 2,176 x 71 企業コード 本社所在地市区郡_2012~ 業種大分類_2012 `資本金(千円)_2012`~ 従業員数_2012 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 01103_北海道札幌市東区~ G:卸売・小売業，飲食~ 1419800 197 2 G92155065 13113_東京都渋谷区~ H:金融・保険業 8462000 1418 3 G92143569 01104_北海道札幌市白石区~ G:卸売・小売業，飲食~ 370700 535 4 G92190707 01101_北海道札幌市中央区~ G:卸売・小売業，飲食~ 639200 694 5 G92515950 01105_北海道札幌市豊平区~ F:製造業 1958700 840 6 G92508571 27128_大阪府大阪市中央区~ F:製造業 30041600 1436 7 G92559088 01101_北海道札幌市中央区~ K:電気・ガス・水道・~ 83595900 2814 8 G92552130 01104_北海道札幌市白石区~ E:建設業 2577500 2145 9 G92557890 01110_北海道札幌市清田区~ F:製造業 4217000 461 10 G92556303 01101_北海道札幌市中央区~ K:電気・ガス・水道・~ 3913100 769 # ... with 2,166 more rows, and 66 more variables: # 最新期業績決算期年_2012 &lt;dbl&gt;, 最新期業績決算期月_2012 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2012` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2012` &lt;dbl&gt;, 創業年_2012 &lt;dbl&gt;, # 設立年_2012 &lt;dbl&gt;, 本社所在地市区郡_2013 &lt;chr&gt;, 業種大分類_2013 &lt;chr&gt;, # `資本金(千円)_2013` &lt;dbl&gt;, 従業員数_2013 &lt;dbl&gt;, # 最新期業績決算期年_2013 &lt;dbl&gt;, 最新期業績決算期月_2013 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2013` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2013` &lt;dbl&gt;, 創業年_2013 &lt;dbl&gt;, # 設立年_2013 &lt;dbl&gt;, 本社所在地市区郡_2014 &lt;chr&gt;, 業種大分類_2014 &lt;chr&gt;, # `資本金(千円)_2014` &lt;dbl&gt;, 従業員数_2014 &lt;dbl&gt;, # 最新期業績決算期年_2014 &lt;dbl&gt;, 最新期業績決算期月_2014 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2014` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2014` &lt;dbl&gt;, 創業年_2014 &lt;dbl&gt;, # 設立年_2014 &lt;dbl&gt;, 本社所在地市区郡_2015 &lt;chr&gt;, 業種大分類_2015 &lt;chr&gt;, # `資本金(千円)_2015` &lt;dbl&gt;, 従業員数_2015 &lt;dbl&gt;, # 最新期業績決算期年_2015 &lt;dbl&gt;, 最新期業績決算期月_2015 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2015` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2015` &lt;dbl&gt;, 創業年_2015 &lt;dbl&gt;, # 設立年_2015 &lt;dbl&gt;, 本社所在地市区郡_2016 &lt;chr&gt;, 業種大分類_2016 &lt;chr&gt;, # `資本金(千円)_2016` &lt;dbl&gt;, 従業員数_2016 &lt;dbl&gt;, # 最新期業績決算期年_2016 &lt;dbl&gt;, 最新期業績決算期月_2016 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2016` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2016` &lt;dbl&gt;, 創業年_2016 &lt;dbl&gt;, # 設立年_2016 &lt;dbl&gt;, 本社所在地市区郡_2017 &lt;chr&gt;, 業種大分類_2017 &lt;chr&gt;, # `資本金(千円)_2017` &lt;dbl&gt;, 従業員数_2017 &lt;dbl&gt;, # 最新期業績決算期年_2017 &lt;dbl&gt;, 最新期業績決算期月_2017 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2017` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2017` &lt;dbl&gt;, 創業年_2017 &lt;dbl&gt;, # 設立年_2017 &lt;dbl&gt;, 本社所在地市区郡_2018 &lt;chr&gt;, 業種大分類_2018 &lt;chr&gt;, # `資本金(千円)_2018` &lt;dbl&gt;, 従業員数_2018 &lt;dbl&gt;, # 最新期業績決算期年_2018 &lt;dbl&gt;, 最新期業績決算期月_2018 &lt;dbl&gt;, # `最新期業績売上高(百万円)_2018` &lt;dbl&gt;, # `最新期業績税引後利益(千円)_2018` &lt;dbl&gt;, 創業年_2018 &lt;dbl&gt;, # 設立年_2018 &lt;dbl&gt; 建設的な方法 必要なデータが決まっている場合は、以下のようにして結合する変数を選択してjoinをすると建設的です wide_emp &lt;- data_list[[&quot;data_2012&quot;]] %&gt;% select(企業コード) for (dl_name in names(data_list)) { wide_emp &lt;- wide_emp %&gt;% left_join( data_list[[dl_name]] %&gt;% # containsは後ほど解説 select(企業コード, contains(&quot;従業員数&quot;)), by = &quot;企業コード&quot;) } wide_emp # A tibble: 2,176 x 8 企業コード 従業員数_2012 従業員数_2013 従業員数_2014 従業員数_2015 &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 G92155635 197 45 241 194 2 G92155065 1418 2049 3632 2615 3 G92143569 535 13 611 471 4 G92190707 694 960 778 566 5 G92515950 840 722 783 794 6 G92508571 1436 737 1472 1062 7 G92559088 2814 10884 3735 7194 8 G92552130 2145 2772 1568 1465 9 G92557890 461 556 555 674 10 G92556303 769 201 770 413 # ... with 2,166 more rows, and 3 more variables: 従業員数_2016 &lt;dbl&gt;, # 従業員数_2017 &lt;dbl&gt;, 従業員数_2018 &lt;dbl&gt; 4.7.5 補足 2012年のデータのレコード数と、すべてのデータをヨコ結合したデータのレコード数が同数であることが確認できます nrow(data_list[[&quot;data_2012&quot;]]) [1] 2176 nrow(wide_data) [1] 2176 4.7.6 参考 欠損値の可視化をする便利なパッケージもあります パッケージ名::関数()と書くことで、どのパッケージの関数を使うか明示することができます wide_data %&gt;% select(企業コード, contains(&quot;従業員数&quot;)) %&gt;% naniar::vis_miss() 4.8 箸休めスライド map関数 selectのhelper関数 4.8.1 map関数 mapとは、ベクトルを関数にかける関数の1つで、高階関数とも呼ばれます 返り値はベクトルと同じ長さのlistです ポイントは、引数を関数の後ろに続けて書くことです 詳細は上級編で解説します 1:3 %&gt;% map(log) [[1]] [1] 0 [[2]] [1] 0.6931472 [[3]] [1] 1.098612 c(&quot;東京都&quot;,&quot;滋賀県&quot;)%&gt;% map(substr, 1, 2) [[1]] [1] &quot;東京&quot; [[2]] [1] &quot;滋賀&quot; rename_withのところで使ったmapは、data_listの2012年から2018年の7つのデータに対して、colnames関数をかけた結果が、listとして返ってきていました data_list %&gt;% map(colnames) $data_2012 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2012&quot; [3] &quot;業種大分類_2012&quot; &quot;資本金(千円)_2012&quot; [5] &quot;従業員数_2012&quot; &quot;最新期業績決算期年_2012&quot; [7] &quot;最新期業績決算期月_2012&quot; &quot;最新期業績売上高(百万円)_2012&quot; [9] &quot;最新期業績税引後利益(千円)_2012&quot; &quot;創業年_2012&quot; [11] &quot;設立年_2012&quot; $data_2013 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2013&quot; [3] &quot;業種大分類_2013&quot; &quot;資本金(千円)_2013&quot; [5] &quot;従業員数_2013&quot; &quot;最新期業績決算期年_2013&quot; [7] &quot;最新期業績決算期月_2013&quot; &quot;最新期業績売上高(百万円)_2013&quot; [9] &quot;最新期業績税引後利益(千円)_2013&quot; &quot;創業年_2013&quot; [11] &quot;設立年_2013&quot; $data_2014 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2014&quot; [3] &quot;業種大分類_2014&quot; &quot;資本金(千円)_2014&quot; [5] &quot;従業員数_2014&quot; &quot;最新期業績決算期年_2014&quot; [7] &quot;最新期業績決算期月_2014&quot; &quot;最新期業績売上高(百万円)_2014&quot; [9] &quot;最新期業績税引後利益(千円)_2014&quot; &quot;創業年_2014&quot; [11] &quot;設立年_2014&quot; $data_2015 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2015&quot; [3] &quot;業種大分類_2015&quot; &quot;資本金(千円)_2015&quot; [5] &quot;従業員数_2015&quot; &quot;最新期業績決算期年_2015&quot; [7] &quot;最新期業績決算期月_2015&quot; &quot;最新期業績売上高(百万円)_2015&quot; [9] &quot;最新期業績税引後利益(千円)_2015&quot; &quot;創業年_2015&quot; [11] &quot;設立年_2015&quot; $data_2016 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2016&quot; [3] &quot;業種大分類_2016&quot; &quot;資本金(千円)_2016&quot; [5] &quot;従業員数_2016&quot; &quot;最新期業績決算期年_2016&quot; [7] &quot;最新期業績決算期月_2016&quot; &quot;最新期業績売上高(百万円)_2016&quot; [9] &quot;最新期業績税引後利益(千円)_2016&quot; &quot;創業年_2016&quot; [11] &quot;設立年_2016&quot; $data_2017 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2017&quot; [3] &quot;業種大分類_2017&quot; &quot;資本金(千円)_2017&quot; [5] &quot;従業員数_2017&quot; &quot;最新期業績決算期年_2017&quot; [7] &quot;最新期業績決算期月_2017&quot; &quot;最新期業績売上高(百万円)_2017&quot; [9] &quot;最新期業績税引後利益(千円)_2017&quot; &quot;創業年_2017&quot; [11] &quot;設立年_2017&quot; $data_2018 [1] &quot;企業コード&quot; &quot;本社所在地市区郡_2018&quot; [3] &quot;業種大分類_2018&quot; &quot;資本金(千円)_2018&quot; [5] &quot;従業員数_2018&quot; &quot;最新期業績決算期年_2018&quot; [7] &quot;最新期業績決算期月_2018&quot; &quot;最新期業績売上高(百万円)_2018&quot; [9] &quot;最新期業績税引後利益(千円)_2018&quot; &quot;創業年_2018&quot; [11] &quot;設立年_2018&quot; 4.8.2 selectのhelper関数 selectで使用できるhelper関数というのがあります これらは特定のカラム抽出に便利なので、覚えましょう starts_with 特定の文字列から始まるカラムを選択 ends_with 特定の文字列で終わるカラムを選択 contains 特定の文字列を含むカラムを選択 下記コードでは、「従業員数」という文字列を含むカラムと企業コードをselectしています wide_data %&gt;% select(企業コード, contains(&quot;従業員数&quot;)) "],["book_04_intermediate_2nd_half.html", "5 中級編後半 作業の確認 5.1 前半の作業のおさらい 5.2 タテ持ちデータ・ヨコ持ちデータ 5.3 研磨データの比較検証 5.4 前年度比の算出 5.5 データの可視化 5.6 ランキングの作成 おわり", " 5 中級編後半 作業の確認 中級の作業イメージ 左半分を終えたので、右半分を後半で進めていきます。 目次（中級後半） 前半の作業のおさらい タテ持ちデータ・ヨコ持ちデータ データの検証 前年度比の算出 演習 データの可視化 ランキングの作成 5.1 前半の作業のおさらい 5.1.1 複数データの読み込み listとfor文を使って複数データを一括で読み込みました。 5.1.2 タテ結合とヨコ結合 2通りの方法で複数データを結合し、long_dataとwide_dataを作成しました。 bind_rowsでタテに結合 （long_data） left_joinでヨコに結合 （wide_data） 5.2 タテ持ちデータ・ヨコ持ちデータ データ保持形式を理解し、タテヨコ変換を習得します pivot_longer pivot_wider 5.2.1 タテ持ち・ヨコ持ちとは タテ持ちデータとヨコ持ちデータの違いは、データを保持する形式の違いだけです 中級前半で作成したlong_dataがタテ持ちデータ、wide_dataがヨコ持ちデータとなっています スライド上では見やすさのため、従業員数カラムに着目した小規模データで表示しています html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #uxxafefwzb .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #uxxafefwzb .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #uxxafefwzb .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #uxxafefwzb .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #uxxafefwzb .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uxxafefwzb .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #uxxafefwzb .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #uxxafefwzb .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #uxxafefwzb .gt_column_spanner_outer:first-child { padding-left: 0; } #uxxafefwzb .gt_column_spanner_outer:last-child { padding-right: 0; } #uxxafefwzb .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #uxxafefwzb .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #uxxafefwzb .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #uxxafefwzb .gt_from_md > :first-child { margin-top: 0; } #uxxafefwzb .gt_from_md > :last-child { margin-bottom: 0; } #uxxafefwzb .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #uxxafefwzb .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #uxxafefwzb .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #uxxafefwzb .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #uxxafefwzb .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #uxxafefwzb .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #uxxafefwzb .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #uxxafefwzb .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uxxafefwzb .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #uxxafefwzb .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #uxxafefwzb .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #uxxafefwzb .gt_sourcenote { font-size: 90%; padding: 4px; } #uxxafefwzb .gt_left { text-align: left; } #uxxafefwzb .gt_center { text-align: center; } #uxxafefwzb .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #uxxafefwzb .gt_font_normal { font-weight: normal; } #uxxafefwzb .gt_font_bold { font-weight: bold; } #uxxafefwzb .gt_font_italic { font-style: italic; } #uxxafefwzb .gt_super { font-size: 65%; } #uxxafefwzb .gt_footnote_marks { font-style: italic; font-size: 65%; } long_data 企業コード year 従業員数 B02111302 2012 1254 B02111302 2013 768 B02111302 2014 1242 B02117802 2012 82 B02117802 2013 376 B02117802 2014 374 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ajzmnybvns .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ajzmnybvns .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ajzmnybvns .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #ajzmnybvns .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #ajzmnybvns .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ajzmnybvns .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ajzmnybvns .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ajzmnybvns .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ajzmnybvns .gt_column_spanner_outer:first-child { padding-left: 0; } #ajzmnybvns .gt_column_spanner_outer:last-child { padding-right: 0; } #ajzmnybvns .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #ajzmnybvns .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ajzmnybvns .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ajzmnybvns .gt_from_md > :first-child { margin-top: 0; } #ajzmnybvns .gt_from_md > :last-child { margin-bottom: 0; } #ajzmnybvns .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ajzmnybvns .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #ajzmnybvns .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ajzmnybvns .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #ajzmnybvns .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ajzmnybvns .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ajzmnybvns .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ajzmnybvns .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ajzmnybvns .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ajzmnybvns .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #ajzmnybvns .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ajzmnybvns .gt_sourcenote { font-size: 90%; padding: 4px; } #ajzmnybvns .gt_left { text-align: left; } #ajzmnybvns .gt_center { text-align: center; } #ajzmnybvns .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ajzmnybvns .gt_font_normal { font-weight: normal; } #ajzmnybvns .gt_font_bold { font-weight: bold; } #ajzmnybvns .gt_font_italic { font-style: italic; } #ajzmnybvns .gt_super { font-size: 65%; } #ajzmnybvns .gt_footnote_marks { font-style: italic; font-size: 65%; } wide_data 企業コード 従業員数_2012 従業員数_2013 従業員数_2014 B02111302 1254 768 1242 B02117802 82 376 374 5.2.2 タテ持ち・ヨコ持ちの特徴 タテ：1行から1つの情報を読み取ります ヨコ：行と列の交差点から1つの情報を読み取ります 特徴項目 タテ ヨコ 人間が理解しやすい ×  コンピュータが理解しやすい  × excelなどで見慣れた形式 ×  新しいデータの追加がしやすい  × 可視化・機械学習に適している  × html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #wrytbdzuvz .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #wrytbdzuvz .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wrytbdzuvz .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #wrytbdzuvz .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #wrytbdzuvz .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wrytbdzuvz .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #wrytbdzuvz .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #wrytbdzuvz .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #wrytbdzuvz .gt_column_spanner_outer:first-child { padding-left: 0; } #wrytbdzuvz .gt_column_spanner_outer:last-child { padding-right: 0; } #wrytbdzuvz .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #wrytbdzuvz .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #wrytbdzuvz .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #wrytbdzuvz .gt_from_md > :first-child { margin-top: 0; } #wrytbdzuvz .gt_from_md > :last-child { margin-bottom: 0; } #wrytbdzuvz .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #wrytbdzuvz .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #wrytbdzuvz .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wrytbdzuvz .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #wrytbdzuvz .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #wrytbdzuvz .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #wrytbdzuvz .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #wrytbdzuvz .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #wrytbdzuvz .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wrytbdzuvz .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #wrytbdzuvz .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #wrytbdzuvz .gt_sourcenote { font-size: 90%; padding: 4px; } #wrytbdzuvz .gt_left { text-align: left; } #wrytbdzuvz .gt_center { text-align: center; } #wrytbdzuvz .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #wrytbdzuvz .gt_font_normal { font-weight: normal; } #wrytbdzuvz .gt_font_bold { font-weight: bold; } #wrytbdzuvz .gt_font_italic { font-style: italic; } #wrytbdzuvz .gt_super { font-size: 65%; } #wrytbdzuvz .gt_footnote_marks { font-style: italic; font-size: 65%; } long_data 企業コード year 従業員数 B02111302 2012 1254 B02111302 2013 768 B02111302 2014 1242 B02117802 2012 82 B02117802 2013 376 B02117802 2014 374 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #enljtxucdf .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #enljtxucdf .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #enljtxucdf .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #enljtxucdf .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #enljtxucdf .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #enljtxucdf .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #enljtxucdf .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #enljtxucdf .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #enljtxucdf .gt_column_spanner_outer:first-child { padding-left: 0; } #enljtxucdf .gt_column_spanner_outer:last-child { padding-right: 0; } #enljtxucdf .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #enljtxucdf .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #enljtxucdf .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #enljtxucdf .gt_from_md > :first-child { margin-top: 0; } #enljtxucdf .gt_from_md > :last-child { margin-bottom: 0; } #enljtxucdf .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #enljtxucdf .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #enljtxucdf .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #enljtxucdf .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #enljtxucdf .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #enljtxucdf .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #enljtxucdf .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #enljtxucdf .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #enljtxucdf .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #enljtxucdf .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #enljtxucdf .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #enljtxucdf .gt_sourcenote { font-size: 90%; padding: 4px; } #enljtxucdf .gt_left { text-align: left; } #enljtxucdf .gt_center { text-align: center; } #enljtxucdf .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #enljtxucdf .gt_font_normal { font-weight: normal; } #enljtxucdf .gt_font_bold { font-weight: bold; } #enljtxucdf .gt_font_italic { font-style: italic; } #enljtxucdf .gt_super { font-size: 65%; } #enljtxucdf .gt_footnote_marks { font-style: italic; font-size: 65%; } wide_data 企業コード 従業員数_2012 従業員数_2013 従業員数_2014 B02111302 1254 768 1242 B02117802 82 376 374 5.2.3 タテヨコ変換 以下2点のような理由から、データを自在にタテヨコ変換できるようになる必要があります タテ持ちデータで可視化・機械学習をすることが多い ヨコ持ちデータでのファイル出力を求められる場合がある タテとヨコの変換には、pivot_longerとpivot_widerという関数を使用します 先にタテヨコ変換のイメージをつかんでもらった後に、上記関数を用いたタテヨコ変換の実装をします 5.2.4 タテヨコ変換イメージ画像 次頁にgifのモーション画像があります。 5.2.5 タテヨコ変換イメージgif ヨコタテは、選択したカラム名でkeyカラムを作り、選択したカラム名にあったデータでvalueカラムを作る操作です タテヨコは、選択したkeyカラムのデータをカラム化し、選択したvalueカラムのデータを行と列に対応した位置へ移動します 5.2.6 タテヨコ変換実装 wide_data %&gt;% select(企業コード, contains(&quot;従業員数&quot;)) %&gt;% pivot_longer( cols = -&quot;企業コード&quot;, names_to = &quot;year&quot;, names_prefix = &quot;従業員数_&quot;, values_to = &quot;従業員数&quot;) long_data %&gt;% select(&quot;企業コード&quot;, &quot;year&quot;,&quot;従業員数&quot;) %&gt;% pivot_wider( names_from=&quot;year&quot;, names_prefix = &quot;従業員数_&quot;, values_from=&quot;従業員数&quot;) 詳細は次頁で解説します html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #cakokmawrv .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #cakokmawrv .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cakokmawrv .gt_title { color: #333333; font-size: 12px; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #cakokmawrv .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #cakokmawrv .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cakokmawrv .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cakokmawrv .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #cakokmawrv .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #cakokmawrv .gt_column_spanner_outer:first-child { padding-left: 0; } #cakokmawrv .gt_column_spanner_outer:last-child { padding-right: 0; } #cakokmawrv .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #cakokmawrv .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #cakokmawrv .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #cakokmawrv .gt_from_md > :first-child { margin-top: 0; } #cakokmawrv .gt_from_md > :last-child { margin-bottom: 0; } #cakokmawrv .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #cakokmawrv .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #cakokmawrv .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cakokmawrv .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #cakokmawrv .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cakokmawrv .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #cakokmawrv .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #cakokmawrv .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cakokmawrv .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cakokmawrv .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #cakokmawrv .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cakokmawrv .gt_sourcenote { font-size: 90%; padding: 4px; } #cakokmawrv .gt_left { text-align: left; } #cakokmawrv .gt_center { text-align: center; } #cakokmawrv .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #cakokmawrv .gt_font_normal { font-weight: normal; } #cakokmawrv .gt_font_bold { font-weight: bold; } #cakokmawrv .gt_font_italic { font-style: italic; } #cakokmawrv .gt_super { font-size: 65%; } #cakokmawrv .gt_footnote_marks { font-style: italic; font-size: 65%; } long_data 企業コード year 従業員数 B02111302 2012 1254 B02111302 2013 768 B02111302 2014 1242 B02117802 2012 82 B02117802 2013 376 B02117802 2014 374 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #pxedeeifuf .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pxedeeifuf .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pxedeeifuf .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #pxedeeifuf .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #pxedeeifuf .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pxedeeifuf .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pxedeeifuf .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pxedeeifuf .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pxedeeifuf .gt_column_spanner_outer:first-child { padding-left: 0; } #pxedeeifuf .gt_column_spanner_outer:last-child { padding-right: 0; } #pxedeeifuf .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #pxedeeifuf .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #pxedeeifuf .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pxedeeifuf .gt_from_md > :first-child { margin-top: 0; } #pxedeeifuf .gt_from_md > :last-child { margin-bottom: 0; } #pxedeeifuf .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pxedeeifuf .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #pxedeeifuf .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pxedeeifuf .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #pxedeeifuf .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pxedeeifuf .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pxedeeifuf .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pxedeeifuf .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pxedeeifuf .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pxedeeifuf .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #pxedeeifuf .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pxedeeifuf .gt_sourcenote { font-size: 90%; padding: 4px; } #pxedeeifuf .gt_left { text-align: left; } #pxedeeifuf .gt_center { text-align: center; } #pxedeeifuf .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pxedeeifuf .gt_font_normal { font-weight: normal; } #pxedeeifuf .gt_font_bold { font-weight: bold; } #pxedeeifuf .gt_font_italic { font-style: italic; } #pxedeeifuf .gt_super { font-size: 65%; } #pxedeeifuf .gt_footnote_marks { font-style: italic; font-size: 65%; } wide_data 企業コード 従業員数_2012 従業員数_2013 従業員数_2014 B02111302 1254 768 1242 B02117802 82 376 374 5.2.7 pivot_longerでヨコ  タテ変換 引数 意味 cols keyカラムに格納するカラム名を、select関数と同様にして選択 names_to keyカラムのカラム名を指定 names_prefix colsで選択したカラム名から消去したい接頭辞を指定 values_to valueカラムのカラム名を指定 wide_data %&gt;% select(企業コード, contains(&quot;従業員数&quot;)) %&gt;% pivot_longer( cols = -&quot;企業コード&quot;, names_to = &quot;year&quot;, names_prefix = &quot;従業員数_&quot;, values_to = &quot;従業員数&quot;) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #fdvsjezdei .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 20px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #fdvsjezdei .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #fdvsjezdei .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #fdvsjezdei .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #fdvsjezdei .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #fdvsjezdei .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #fdvsjezdei .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #fdvsjezdei .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #fdvsjezdei .gt_column_spanner_outer:first-child { padding-left: 0; } #fdvsjezdei .gt_column_spanner_outer:last-child { padding-right: 0; } #fdvsjezdei .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #fdvsjezdei .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #fdvsjezdei .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #fdvsjezdei .gt_from_md > :first-child { margin-top: 0; } #fdvsjezdei .gt_from_md > :last-child { margin-bottom: 0; } #fdvsjezdei .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #fdvsjezdei .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #fdvsjezdei .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #fdvsjezdei .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #fdvsjezdei .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #fdvsjezdei .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #fdvsjezdei .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #fdvsjezdei .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #fdvsjezdei .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #fdvsjezdei .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #fdvsjezdei .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #fdvsjezdei .gt_sourcenote { font-size: 90%; padding: 4px; } #fdvsjezdei .gt_left { text-align: left; } #fdvsjezdei .gt_center { text-align: center; } #fdvsjezdei .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #fdvsjezdei .gt_font_normal { font-weight: normal; } #fdvsjezdei .gt_font_bold { font-weight: bold; } #fdvsjezdei .gt_font_italic { font-style: italic; } #fdvsjezdei .gt_super { font-size: 65%; } #fdvsjezdei .gt_footnote_marks { font-style: italic; font-size: 65%; } long_data 企業コード year 従業員数 B02111302 2012 1254 B02111302 2013 768 B02111302 2014 1242 B02117802 2012 82 B02117802 2013 376 B02117802 2014 374 5.2.8 pivot_widerでタテ  ヨコ変換 引数 意味 names_from カラム化したいデータが入っているカラム名(keyカラム)を指定 names_prefix 付与する接頭辞を指定 values_from 行と列で対応させたいデータのカラム名を指定 long_data %&gt;% select(&quot;企業コード&quot;, &quot;year&quot;, &quot;従業員数&quot;) %&gt;% pivot_wider(names_from=&quot;year&quot;, names_prefix = &quot;従業員数_&quot;, values_from=&quot;従業員数&quot;) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #vwqlttjnyn .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 20px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #vwqlttjnyn .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vwqlttjnyn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #vwqlttjnyn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #vwqlttjnyn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vwqlttjnyn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vwqlttjnyn .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #vwqlttjnyn .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #vwqlttjnyn .gt_column_spanner_outer:first-child { padding-left: 0; } #vwqlttjnyn .gt_column_spanner_outer:last-child { padding-right: 0; } #vwqlttjnyn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #vwqlttjnyn .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #vwqlttjnyn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #vwqlttjnyn .gt_from_md > :first-child { margin-top: 0; } #vwqlttjnyn .gt_from_md > :last-child { margin-bottom: 0; } #vwqlttjnyn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #vwqlttjnyn .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #vwqlttjnyn .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vwqlttjnyn .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #vwqlttjnyn .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vwqlttjnyn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #vwqlttjnyn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #vwqlttjnyn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vwqlttjnyn .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vwqlttjnyn .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #vwqlttjnyn .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vwqlttjnyn .gt_sourcenote { font-size: 90%; padding: 4px; } #vwqlttjnyn .gt_left { text-align: left; } #vwqlttjnyn .gt_center { text-align: center; } #vwqlttjnyn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #vwqlttjnyn .gt_font_normal { font-weight: normal; } #vwqlttjnyn .gt_font_bold { font-weight: bold; } #vwqlttjnyn .gt_font_italic { font-style: italic; } #vwqlttjnyn .gt_super { font-size: 65%; } #vwqlttjnyn .gt_footnote_marks { font-style: italic; font-size: 65%; } wide_data 企業コード 従業員数_2012 従業員数_2013 従業員数_2014 B02111302 1254 768 1242 B02117802 82 376 374 5.3 研磨データの比較検証 データの比較検証方法を習得します 5.3.1 比較検証をする理由 世の中に「研磨データの正解データ」はありません そのため研磨データの正確性を担保するために、2人以上で研磨データを作成して比較検証をおこなう（ダブルチェック）ことがあります 5.3.2 比較検証をする方法 比較検証の練習として、long_dataと、wide_dataをタテ持ち変換したデータの比較検証を行います 前節のとおり、タテ持ちとヨコ持ちの違いはデータを保持する形式の違いだけなので、データ保持形式を揃えたらデータが一致するはずだからです なおデータ比較の際には、以下の項目を事前にそろえておく必要があります カラムの名前・順番・型、レコードの順番 ここではdiffdfパッケージを用いてデータの比較検証をおこなうので、diffdfのインストールと読み込みをします # install.packages(&quot;diffdf&quot;) # diffdfのインストール library(diffdf) # diffdfの読み込み 5.3.3 検証データの作成：long_data まずはlong_dataから検証データを作成します 練習なので、従業員数カラムに注目して検証します long_dataからlong_emp_lを、以下の仕様で作成します 企業コード, year, 従業員数の3つのカラムを選択 企業コードとyearでソート long_emp_l &lt;- long_data %&gt;% select(企業コード, year, 従業員数) %&gt;% arrange(企業コード, year) long_emp_l # A tibble: 14,972 x 3 企業コード year 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02111302 2012 1254 2 B02111302 2013 768 3 B02111302 2014 1242 4 B02111302 2015 1409 5 B02111302 2016 728 6 B02111302 2017 1401 7 B02111302 2018 1096 8 B02117802 2012 82 9 B02117802 2013 376 10 B02117802 2014 374 # ... with 14,962 more rows 5.3.4 検証データの作成：wide_data 次にwide_dataをタテ変換してlong_emp_wを作成します こちらもlong_emp_lと同様の仕様で作成します long_emp_w &lt;- wide_data %&gt;% select(企業コード, contains(&quot;従業員数&quot;)) %&gt;% pivot_longer( cols = -企業コード, names_to = &quot;year&quot;, values_to = &quot;従業員数&quot;, names_prefix=&quot;従業員数_&quot;)%&gt;% arrange(企業コード, year) long_emp_w # A tibble: 15,232 x 3 企業コード year 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02111302 2012 1254 2 B02111302 2013 768 3 B02111302 2014 1242 4 B02111302 2015 1409 5 B02111302 2016 728 6 B02111302 2017 1401 7 B02111302 2018 1096 8 B02117802 2012 82 9 B02117802 2013 376 10 B02117802 2014 374 # ... with 15,222 more rows 5.3.5 diffdfで一致確認 long_dataと、wide_dataをタテ持ちデータにしたものを比較検証すると、一致しなかったデータに関するメッセージがたくさん出てきました なぜ一致しないのか確認していきましょう library(diffdf) diffdf(long_emp_l, long_emp_w) Differences found between the objects! A summary is given below. There are rows in COMPARE that are not in BASE !! First 10 of 260 rows are shown in table below =============== ..ROWNUMBER.. --------------- 14973 14974 14975 14976 14977 14978 14979 14980 14981 14982 --------------- Not all Values Compared Equal All rows are shown in table below ============================= Variable No of Differences ----------------------------- 企業コード 14335 year 12912 従業員数 14911 ----------------------------- First 10 of 14335 rows are shown in table below =============================================== VARIABLE ..ROWNUMBER.. BASE COMPARE ----------------------------------------------- 企業コード 15 B02119859 B02122250 企業コード 22 B02122250 B02122602 企業コード 29 B02122602 B02124175 企業コード 34 B02125529 B02124175 企業コード 35 B02125529 B02124175 企業コード 41 B02128716 B02125529 企業コード 42 B02128716 B02125529 企業コード 48 B02129789 B02128716 企業コード 49 B02129789 B02128716 企業コード 55 B02153443 B02129789 ----------------------------------------------- First 10 of 12912 rows are shown in table below ======================================== VARIABLE ..ROWNUMBER.. BASE COMPARE ---------------------------------------- year 15 2018 2012 year 16 2012 2013 year 17 2013 2014 year 18 2014 2015 year 19 2015 2016 year 20 2016 2017 year 21 2017 2018 year 22 2018 2012 year 23 2012 2013 year 24 2013 2014 ---------------------------------------- First 10 of 14911 rows are shown in table below ========================================= VARIABLE ..ROWNUMBER.. BASE COMPARE ----------------------------------------- 従業員数 15 205 790 従業員数 16 790 690 従業員数 17 690 1074 従業員数 18 1074 1123 従業員数 19 1123 297 従業員数 20 297 523 従業員数 21 523 695 従業員数 22 695 23216 従業員数 23 23216 4217 従業員数 24 4217 6092 ----------------------------------------- 5.3.6 不一致の原因 レコード数が異なることやレコードがズレていることから、タテとヨコのデータの結合方法の違いが不一致の原因と考えられます たとえば企業コードが“B02119859”のデータは、long_dataにはありますがwide_dataにはありません long_data %&gt;% filter( 企業コード==&quot;B02119859&quot; ) %&gt;% nrow() [1] 1 wide_data %&gt;% filter( 企業コード==&quot;B02119859&quot; ) %&gt;% nrow() [1] 0 5.3.7 不一致の理由 long_dataは全データをタテ結合したので、「2012年の企業コード以外」の「企業コード」も存在します wide_dataは2012年の企業コードをキーにしてleft_joinでヨコ結合したので、「2012年のデータにある企業コード」のみが存在します データを一致させるために、「2012年から2018年までの7年ぶんのレコードがすべて存在するデータ」という条件で絞って再度検証してみましょう 5.3.8 条件を揃える準備 7年ぶんのレコードが揃っている企業コードを抽出します code_7year &lt;- long_emp_l %&gt;% group_by(企業コード) %&gt;% count() %&gt;% filter(n == 7) %&gt;% ungroup() # グループ解除(参考参照) # A tibble: 1,788 x 2 企業コード n &lt;chr&gt; &lt;int&gt; 1 B02111302 7 2 B02117802 7 3 B02122250 7 4 B02122602 7 5 B02125529 7 6 B02128716 7 7 B02129789 7 8 B02153443 7 9 B02505784 7 10 B02514384 7 # ... with 1,778 more rows # nは不要なので消しておきます code_7year &lt;- code_7year %&gt;% select(-n) 5.3.9 再度検証 7年ぶん揃っている企業コードのcode_7yearに対して、“企業コード”をキーにlong_emp_lとlong_emp_wをそれぞれleft_joinすることで、条件を満たすデータを抽出します 条件を合わせたデータで再度検証したところ、データが一致したことが確認できました long_emp_l &lt;- code_7year %&gt;% left_join(long_emp_l, by = &quot;企業コード&quot;) long_emp_w &lt;- code_7year %&gt;% left_join(long_emp_w, by = &quot;企業コード&quot;) diffdf(long_emp_l, long_emp_w) No issues were found! 5.3.10 参考：グループ解除 group_byを使ってグループ化されたデータは、ungroupするまでグループ化が継続されます code_7year_g &lt;- long_emp_l %&gt;% group_by(企業コード) %&gt;% count() %&gt;% filter(n == 7) code_7year_g # A tibble: 1,788 x 2 # Groups: 企業コード [1,788] 企業コード n &lt;chr&gt; &lt;int&gt; 1 B02111302 7 2 B02117802 7 3 B02122250 7 4 B02122602 7 5 B02125529 7 6 B02128716 7 7 B02129789 7 8 B02153443 7 9 B02505784 7 10 B02514384 7 # ... with 1,778 more rows code_7year_ug &lt;- long_emp_l %&gt;% group_by(企業コード) %&gt;% count() %&gt;% filter(n == 7) %&gt;% ungroup() code_7year_ug # A tibble: 1,788 x 2 企業コード n &lt;chr&gt; &lt;int&gt; 1 B02111302 7 2 B02117802 7 3 B02122250 7 4 B02122602 7 5 B02125529 7 6 B02128716 7 7 B02129789 7 8 B02153443 7 9 B02505784 7 10 B02514384 7 # ... with 1,778 more rows group化されたデータに対してjoinをしても、group化は勝手に解除されることはないので注意しましょう group化が残っていると、意図せぬに挙動になることがままあります code_7year_g %&gt;% left_join(long_emp_l, by=&quot;企業コード&quot;) # A tibble: 12,516 x 4 # Groups: 企業コード [1,788] 企業コード n year 従業員数 &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02111302 7 2012 1254 2 B02111302 7 2013 768 3 B02111302 7 2014 1242 4 B02111302 7 2015 1409 5 B02111302 7 2016 728 6 B02111302 7 2017 1401 7 B02111302 7 2018 1096 8 B02117802 7 2012 82 9 B02117802 7 2013 376 10 B02117802 7 2014 374 # ... with 12,506 more rows code_7year_ug %&gt;% left_join(long_emp_l, by=&quot;企業コード&quot;) # A tibble: 12,516 x 4 企業コード n year 従業員数 &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02111302 7 2012 1254 2 B02111302 7 2013 768 3 B02111302 7 2014 1242 4 B02111302 7 2015 1409 5 B02111302 7 2016 728 6 B02111302 7 2017 1401 7 B02111302 7 2018 1096 8 B02117802 7 2012 82 9 B02117802 7 2013 376 10 B02117802 7 2014 374 # ... with 12,506 more rows 5.4 前年度比の算出 整った複数年の結合データで指標を算出します 5.4.1 結果の確認 右のように、long_empに従業員数伸び率カラムを作成します 従業員数伸び率カラムは、企業コードごとに\\(\\frac{\\mbox{n年の従業員数}}{\\mbox{n-1年の従業員数}}\\)で算出します html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #qsjvgvgxkq .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 22px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #qsjvgvgxkq .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qsjvgvgxkq .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #qsjvgvgxkq .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #qsjvgvgxkq .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qsjvgvgxkq .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qsjvgvgxkq .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 26px; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #qsjvgvgxkq .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 26px; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #qsjvgvgxkq .gt_column_spanner_outer:first-child { padding-left: 0; } #qsjvgvgxkq .gt_column_spanner_outer:last-child { padding-right: 0; } #qsjvgvgxkq .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #qsjvgvgxkq .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #qsjvgvgxkq .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #qsjvgvgxkq .gt_from_md > :first-child { margin-top: 0; } #qsjvgvgxkq .gt_from_md > :last-child { margin-bottom: 0; } #qsjvgvgxkq .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #qsjvgvgxkq .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #qsjvgvgxkq .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qsjvgvgxkq .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #qsjvgvgxkq .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qsjvgvgxkq .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #qsjvgvgxkq .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #qsjvgvgxkq .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qsjvgvgxkq .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qsjvgvgxkq .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #qsjvgvgxkq .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qsjvgvgxkq .gt_sourcenote { font-size: 90%; padding: 4px; } #qsjvgvgxkq .gt_left { text-align: left; } #qsjvgvgxkq .gt_center { text-align: center; } #qsjvgvgxkq .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #qsjvgvgxkq .gt_font_normal { font-weight: normal; } #qsjvgvgxkq .gt_font_bold { font-weight: bold; } #qsjvgvgxkq .gt_font_italic { font-style: italic; } #qsjvgvgxkq .gt_super { font-size: 65%; } #qsjvgvgxkq .gt_footnote_marks { font-style: italic; font-size: 65%; } long_emp 企業コード year 従業員数 従業員数伸び率 B02111302 2012 1254 NA B02111302 2013 768 0.612 B02111302 2014 1242 1.617 B02111302 2015 1409 1.134 B02111302 2016 728 0.517 B02111302 2017 1401 1.924 B02111302 2018 1096 0.782 B02117802 2012 82 NA B02117802 2013 376 4.585 B02117802 2014 374 0.995 B02117802 2015 294 0.786 B02117802 2016 422 1.435 B02117802 2017 233 0.552 B02117802 2018 173 0.742 B02122250 2012 790 NA B02122250 2013 690 0.873 B02122250 2014 1074 1.557 B02122250 2015 1123 1.046 B02122250 2016 297 0.264 B02122250 2017 523 1.761 B02122250 2018 695 1.329 B02122602 2012 23216 NA B02122602 2013 4217 0.182 B02122602 2014 6092 1.445 B02122602 2015 710 0.117 B02122602 2016 17013 23.962 B02122602 2017 7564 0.445 B02122602 2018 12493 1.652 B02125529 2012 2977 NA B02125529 2013 2762 0.928 B02125529 2014 1369 0.496 B02125529 2015 1466 1.071 B02125529 2016 2211 1.508 B02125529 2017 2274 1.028 B02125529 2018 2472 1.087 B02128716 2012 299 NA B02128716 2013 280 0.936 B02128716 2014 42 0.150 B02128716 2015 401 9.548 B02128716 2016 327 0.815 B02128716 2017 261 0.798 B02128716 2018 376 1.441 B02129789 2012 683 NA B02129789 2013 1022 1.496 B02129789 2014 893 0.874 B02129789 2015 789 0.884 B02129789 2016 1091 1.383 B02129789 2017 645 0.591 B02129789 2018 986 1.529 B02153443 2012 1787 NA B02153443 2013 3066 1.716 B02153443 2014 4522 1.475 B02153443 2015 6582 1.456 B02153443 2016 3606 0.548 B02153443 2017 3960 1.098 B02153443 2018 5563 1.405 B02505784 2012 340 NA B02505784 2013 636 1.871 B02505784 2014 990 1.557 B02505784 2015 681 0.688 B02505784 2016 498 0.731 B02505784 2017 902 1.811 B02505784 2018 728 0.807 B02514384 2012 18 NA B02514384 2013 160 8.889 B02514384 2014 81 0.506 B02514384 2015 316 3.901 B02514384 2016 238 0.753 B02514384 2017 154 0.647 B02514384 2018 324 2.104 B12083033 2012 4241 NA B12083033 2013 2705 0.638 B12083033 2014 2048 0.757 B12083033 2015 2047 1.000 B12083033 2016 3418 1.670 B12083033 2017 955 0.279 B12083033 2018 3454 3.617 B12117505 2012 2479 NA B12117505 2013 3915 1.579 B12117505 2014 2430 0.621 B12117505 2015 2792 1.149 B12117505 2016 1246 0.446 B12117505 2017 187 0.150 B12117505 2018 730 3.904 B12121772 2012 855 NA B12121772 2013 810 0.947 B12121772 2014 643 0.794 B12121772 2015 422 0.656 B12121772 2016 724 1.716 B12121772 2017 616 0.851 B12121772 2018 455 0.739 B12127908 2012 285 NA B12127908 2013 261 0.916 B12127908 2014 491 1.881 B12127908 2015 138 0.281 B12127908 2016 485 3.514 B12127908 2017 403 0.831 B12127908 2018 436 1.082 B22111559 2012 1377 NA B22111559 2013 188 0.137 5.4.2 前年度比算出の手順 long_empを企業コードとyearでソートする group_byとlag関数で企業コードごとの前年従業員数カラムを作る mutateとif_else関数で従業員数伸び率カラムを作る 分子が0以下または分母が0以下のときはNAで返す 上記以外は従業員数÷前年従業員数を返す 見栄えを整える 従業員数に注目したタテ持ちデータのlong_emp_lをlong_empとして使用します。 long_emp &lt;- long_emp_l 5.4.3 手順１：データのソート 前年比算出準備として企業コードとyearでソートします ソートすることでカラム間の差分が計算できるからです long_emp &lt;- long_emp %&gt;% arrange(企業コード, year) long_emp # A tibble: 12,516 x 3 企業コード year 従業員数 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; 1 B02111302 2012 1254 2 B02111302 2013 768 3 B02111302 2014 1242 4 B02111302 2015 1409 5 B02111302 2016 728 6 B02111302 2017 1401 7 B02111302 2018 1096 8 B02117802 2012 82 9 B02117802 2013 376 10 B02117802 2014 374 # ... with 12,506 more rows 5.4.4 手順２：前年従業員数の作成 企業コードごとに前年従業員数カラムを作成します lag関数は指定したベクトルを前にnずらす関数です long_emp &lt;- long_emp %&gt;% group_by(企業コード) %&gt;% mutate(前年従業員数 = lag(従業員数, n = 1)) long_emp # A tibble: 12,516 x 4 # Groups: 企業コード [1,788] 企業コード year 従業員数 前年従業員数 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2012 1254 NA 2 B02111302 2013 768 1254 3 B02111302 2014 1242 768 4 B02111302 2015 1409 1242 5 B02111302 2016 728 1409 6 B02111302 2017 1401 728 7 B02111302 2018 1096 1401 8 B02117802 2012 82 NA 9 B02117802 2013 376 82 10 B02117802 2014 374 376 # ... with 12,506 more rows 5.4.5 手順３：前年度比算出 従業員数伸び率カラムを作成します long_emp &lt;- long_emp %&gt;% mutate(従業員数伸び率 = if_else(前年従業員数 &lt;= 0 | 従業員数 &lt;= 0, as.double(NA), 従業員数 / 前年従業員数)) long_emp # A tibble: 12,516 x 5 # Groups: 企業コード [1,788] 企業コード year 従業員数 前年従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2012 1254 NA NA 2 B02111302 2013 768 1254 0.612 3 B02111302 2014 1242 768 1.62 4 B02111302 2015 1409 1242 1.13 5 B02111302 2016 728 1409 0.517 6 B02111302 2017 1401 728 1.92 7 B02111302 2018 1096 1401 0.782 8 B02117802 2012 82 NA NA 9 B02117802 2013 376 82 4.59 10 B02117802 2014 374 376 0.995 # ... with 12,506 more rows 5.4.6 手順４：見栄えを整える 従業員数伸び率を小数点以下3桁にまるめ、中間変数である前年従業員数を消去します long_emp &lt;- long_emp %&gt;% ungroup() %&gt;% # group化はもう不要なのでgroupを解除します mutate(従業員数伸び率 = round(従業員数伸び率, 3)) %&gt;% select(-前年従業員数) long_emp # A tibble: 12,516 x 4 企業コード year 従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2012 1254 NA 2 B02111302 2013 768 0.612 3 B02111302 2014 1242 1.62 4 B02111302 2015 1409 1.13 5 B02111302 2016 728 0.517 6 B02111302 2017 1401 1.92 7 B02111302 2018 1096 0.782 8 B02117802 2012 82 NA 9 B02117802 2013 376 4.58 10 B02117802 2014 374 0.995 # ... with 12,506 more rows 5.4.7 前年度比算出まとめ スライドの都合上、逐一代入をしましたが、最終的には以下のようにパイプを繋げて書きましょう これ以上パイプが長くなるようなときは、適宜中間変数などを作成しましょう long_emp &lt;- long_emp %&gt;% arrange(企業コード, year) %&gt;% group_by(企業コード) %&gt;% mutate(前年従業員数 = lag(従業員数, n = 1)) %&gt;% mutate(従業員数伸び率 = if_else(前年従業員数 &lt;= 0 | 従業員数 &lt;= 0, as.double(NA), 従業員数 / 前年従業員数)) %&gt;% ungroup() %&gt;% mutate(従業員数伸び率 = round(従業員数伸び率, 3)) %&gt;% select(-前年従業員数) 5.4.8 参考：横持ちで表示 従業員数伸び率をタテ持ちデータで算出しました。これは以下のようにしてヨコ持ちデータに変換できます long_emp %&gt;% select(-従業員数) %&gt;% pivot_wider(names_from = year, values_from = 従業員数伸び率, names_prefix = &quot;従業員数_伸び率&quot;) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #hpaentllmt .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 20px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #hpaentllmt .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hpaentllmt .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #hpaentllmt .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #hpaentllmt .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hpaentllmt .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hpaentllmt .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 22px; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #hpaentllmt .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 22px; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #hpaentllmt .gt_column_spanner_outer:first-child { padding-left: 0; } #hpaentllmt .gt_column_spanner_outer:last-child { padding-right: 0; } #hpaentllmt .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #hpaentllmt .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #hpaentllmt .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #hpaentllmt .gt_from_md > :first-child { margin-top: 0; } #hpaentllmt .gt_from_md > :last-child { margin-bottom: 0; } #hpaentllmt .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #hpaentllmt .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #hpaentllmt .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hpaentllmt .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #hpaentllmt .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hpaentllmt .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #hpaentllmt .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #hpaentllmt .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hpaentllmt .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hpaentllmt .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #hpaentllmt .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hpaentllmt .gt_sourcenote { font-size: 90%; padding: 4px; } #hpaentllmt .gt_left { text-align: left; } #hpaentllmt .gt_center { text-align: center; } #hpaentllmt .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #hpaentllmt .gt_font_normal { font-weight: normal; } #hpaentllmt .gt_font_bold { font-weight: bold; } #hpaentllmt .gt_font_italic { font-style: italic; } #hpaentllmt .gt_super { font-size: 65%; } #hpaentllmt .gt_footnote_marks { font-style: italic; font-size: 65%; } 企業コード 従業員数伸び率_2012 従業員数伸び率_2013 従業員数伸び率_2014 従業員数伸び率_2015 従業員数伸び率_2016 従業員数伸び率_2017 従業員数伸び率_2018 B02111302 NA 0.612 1.617 1.134 0.517 1.924 0.782 B02117802 NA 4.585 0.995 0.786 1.435 0.552 0.742 B02122250 NA 0.873 1.557 1.046 0.264 1.761 1.329 B02122602 NA 0.182 1.445 0.117 23.962 0.445 1.652 B02125529 NA 0.928 0.496 1.071 1.508 1.028 1.087 B02128716 NA 0.936 0.150 9.548 0.815 0.798 1.441 B02129789 NA 1.496 0.874 0.884 1.383 0.591 1.529 B02153443 NA 1.716 1.475 1.456 0.548 1.098 1.405 B02505784 NA 1.871 1.557 0.688 0.731 1.811 0.807 B02514384 NA 8.889 0.506 3.901 0.753 0.647 2.104 B12083033 NA 0.638 0.757 1.000 1.670 0.279 3.617 B12117505 NA 1.579 0.621 1.149 0.446 0.150 3.904 B12121772 NA 0.947 0.794 0.656 1.716 0.851 0.739 B12127908 NA 0.916 1.881 0.281 3.514 0.831 1.082 B22111559 NA 0.137 11.479 0.648 0.386 1.796 1.769 B22118371 NA 0.756 0.528 0.301 3.082 2.172 0.018 B42105710 NA 0.716 0.935 0.556 0.540 4.047 1.102 B42112673 NA 1.464 1.636 3.261 0.411 1.139 0.620 B42113715 NA 0.974 0.755 1.742 0.273 3.379 0.991 B42116333 NA 0.188 3.293 0.627 0.621 3.732 0.977 B42119099 NA 0.754 0.708 1.032 2.212 0.403 1.345 B42120113 NA 1.771 0.748 1.522 0.469 0.089 17.400 B42124422 NA 0.951 1.604 0.803 1.646 0.415 1.327 B42125462 NA 2.710 1.865 1.347 0.525 1.449 0.702 B42126156 NA 0.873 0.785 0.388 2.503 0.557 0.981 B42126640 NA 1.579 1.864 0.856 0.089 9.062 0.743 B42152322 NA 1.106 0.889 1.499 0.302 1.354 2.713 B42193155 NA 39.812 1.527 0.825 1.014 1.009 0.752 B42504542 NA 1.260 0.561 0.982 1.106 1.200 0.447 B42539783 NA 1.701 0.935 0.679 2.112 0.430 0.127 B42588245 NA 0.725 0.567 0.537 2.579 0.736 1.546 B42597519 NA 2.696 0.555 1.576 0.204 4.103 1.207 B42633350 NA 0.445 1.903 0.797 1.358 0.797 0.307 B52112726 NA 0.198 9.000 0.543 1.146 1.590 0.443 B52119466 NA 0.733 2.052 0.919 0.320 2.415 0.911 B58115159 NA 1.782 0.529 2.206 0.466 1.061 1.566 B82147010 NA 1.701 0.768 1.102 1.058 2.050 0.631 B92111476 NA 1.156 1.445 0.179 5.001 0.166 3.004 B92111910 NA 1.097 0.302 2.273 1.028 0.992 0.795 B92122805 NA 1.634 0.437 2.889 0.437 1.963 0.017 B92159680 NA 0.805 0.533 4.522 0.135 1.273 2.629 B92598280 NA 0.419 3.651 0.767 0.292 4.478 0.751 C02122267 NA 1.619 1.050 0.983 0.724 1.209 0.987 C02128399 NA 1.502 0.030 36.333 0.913 0.767 0.881 C02137964 NA 3.113 0.588 0.680 0.858 1.802 0.342 C02522283 NA 1.166 1.290 0.381 1.133 1.638 0.883 C12118341 NA 1.396 0.334 0.160 11.147 0.786 2.007 C12582479 NA 0.667 1.291 1.424 1.160 1.224 0.072 C22116979 NA 0.356 1.675 2.848 0.763 0.869 1.405 C22158694 NA 0.990 0.726 0.214 12.149 0.380 1.114 C32114510 NA 0.706 0.440 3.041 0.375 0.920 2.372 C32118312 NA 0.766 0.817 4.179 0.391 0.927 0.296 C32618733 NA 0.882 0.948 1.385 0.872 2.646 0.267 C42103174 NA 4.812 0.107 0.404 31.952 0.358 0.912 C42110360 NA 1.270 0.473 0.169 7.533 1.292 1.021 C42112827 NA 0.595 3.546 1.226 0.239 2.856 1.369 C42125774 NA 1.019 0.744 0.125 6.950 0.727 1.218 C42142466 NA 0.907 0.850 1.326 0.392 1.702 1.387 C42142500 NA 0.962 0.710 0.154 18.017 0.820 0.720 C42151200 NA 0.534 0.831 1.340 0.866 1.461 0.713 C42151408 NA 1.667 0.774 0.666 1.058 0.473 1.583 C42151590 NA 1.115 1.099 1.453 0.514 1.598 0.705 C42159269 NA 0.565 1.355 1.160 0.799 1.447 1.000 C42166567 NA 0.997 1.116 1.349 0.649 0.454 3.488 C42175682 NA 0.785 1.123 1.602 0.541 1.376 1.652 C42516470 NA 1.072 0.558 0.159 31.459 0.729 1.383 C42516485 NA 1.245 1.135 1.109 0.013 54.000 1.049 C42538173 NA 0.250 5.857 0.463 1.974 1.213 0.484 C42564567 NA 1.230 0.633 1.669 0.660 1.494 0.507 C42616089 NA 14.617 0.766 1.423 0.381 3.897 1.046 C42657447 NA 0.673 0.876 1.475 0.831 1.309 1.819 C42833600 NA 0.938 0.042 5.800 1.172 2.794 0.863 C52143315 NA 0.976 1.520 0.824 1.090 1.075 1.182 C52174709 NA 0.487 0.608 2.444 0.264 2.828 2.207 C62163186 NA 1.549 1.139 1.417 0.697 0.180 4.863 C62177407 NA 1.425 1.028 0.737 1.511 1.554 0.823 C62547310 NA 1.390 1.274 0.994 2.115 0.094 0.381 C72119562 NA 0.976 1.847 0.628 1.425 0.490 0.548 C72124439 NA 0.802 1.072 1.807 0.486 2.172 0.787 C82108010 NA 1.226 1.095 0.416 1.984 0.819 1.118 C82126227 NA 0.665 0.959 1.702 0.609 0.861 0.830 C82153425 NA 0.511 2.577 0.270 4.154 0.367 1.941 C92113550 NA 2.162 2.381 0.438 1.113 0.871 0.968 C92114080 NA 0.425 0.829 0.615 2.079 2.070 2.066 C92114146 NA 0.046 27.127 0.733 1.013 1.172 0.656 C92114618 NA 0.943 0.774 0.117 8.789 0.611 1.029 C92119360 NA 1.135 0.402 1.993 2.250 0.550 1.602 C92119431 NA 0.327 1.000 0.679 1.145 0.966 2.167 C92119510 NA 0.784 1.296 2.494 0.710 0.035 37.467 C92123466 NA 0.572 1.990 1.256 0.957 0.791 0.749 C92180151 NA 0.176 1.534 0.625 4.521 0.139 6.639 C92541519 NA 0.948 1.923 1.102 0.656 1.309 0.684 C92544080 NA 0.849 0.379 2.763 0.501 1.349 0.852 C92544094 NA 1.310 0.654 1.802 0.199 0.042 121.750 C92553123 NA 0.910 1.075 0.394 1.035 0.678 1.192 C92726995 NA 10.178 0.948 1.276 0.617 1.658 0.848 D02116397 NA 0.417 2.077 1.174 1.535 0.447 1.236 D02122956 NA 1.538 0.053 11.786 0.155 8.608 0.936 D02125964 NA 3.619 0.886 1.215 0.568 0.796 1.560 D02141047 NA 2.521 0.764 1.299 0.650 1.294 1.063 5.5 データの可視化 データの理解を深めるために必須のスキルです ggplot2の基礎を習得します 5.5.1 なぜデータを可視化するのか 要約統計量のみではデータの理解が困難だからです データ研磨においても、データ分析においても、データを可視化しながら作業を進めるのが一般的です long_emp # A tibble: 12,516 x 4 企業コード year 従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2012 1254 NA 2 B02111302 2013 768 0.612 3 B02111302 2014 1242 1.62 4 B02111302 2015 1409 1.13 5 B02111302 2016 728 0.517 6 B02111302 2017 1401 1.92 7 B02111302 2018 1096 0.782 8 B02117802 2012 82 NA 9 B02117802 2013 376 4.58 10 B02117802 2014 374 0.995 # ... with 12,506 more rows 従業員数 従業員数伸び率 Min. : 1.0 Min. : 0.001 1st Qu.: 306.8 1st Qu.: 0.615 Median : 668.5 Median : 1.016 Mean : 1821.8 Mean : 2.544 3rd Qu.: 1488.8 3rd Qu.: 1.607 Max. :90164.0 Max. :358.000 NA&#39;s :1 5.5.2 どうやって可視化するのか データの可視化にはggplot2を使用します ggplot2はtidyverseに含まれているパッケージの1つです なぜggplot“2”なのかは気にしないでください 可視化に使用するデータは必ずタテ持ちデータです またggplotはレイヤー(層)構造で設計されています まずは次頁ですべてのレイヤーをまとめて確認した後に、個々のレイヤーを順番に確認していきます ここではlong_empを可視化していきます 5.5.3 ggplotのレイヤー構造 レイヤー（関数） 指定するもの ggplot 使用するデータ aes x軸・y軸などの値やデータの色分けなど geom_* プロットの種類（geom_histogram, geom_pointなど） labs 軸名やタイトルなど facet データの比較分割 レイヤーは+で追加します ggplot(long_emp) + aes(x = 従業員数伸び率) + geom_histogram() + labs( title = &quot;年別の従業員数伸び率&quot; ) + facet_wrap(vars(year)) 5.5.4 ggplot：土台作成 この段階ではもちろん何の可視化もしていません ggplot関数にはまず描画に使用するデータを指定します（tab補完が効くようになるのでパイプを推奨） ggplot() long_emp %&gt;% ggplot() 5.5.5 aes：データの情報を指定 aes関数で軸のデータを指定します ggplot内に書くことを推奨します long_emp %&gt;% ggplot() + aes(x = 従業員数伸び率) long_emp %&gt;% ggplot(aes(x = 従業員数伸び率)) 5.5.6 geom_＊：描画 ヒストグラムならgeom_histogramを使います 他にも以下のようなプロットを書くことができます geom_point：散布図 geom_boxplot：ボックスプロット geom_line：折れ線グラフ long_emp %&gt;% ggplot(aes(x = 従業員数伸び率)) + geom_histogram() 5.5.7 labs：軸名やタイトル labsで指定できるのは以下のようなものです x：x軸の名前 y：y軸の名前 title：タイトル caption：キャプション 軸名やタイトルを付けることは可視化のルールです long_emp %&gt;% ggplot(aes(x = 従業員数伸び率)) + geom_histogram() + labs( title = &quot;従業員数伸び率のヒストグラム&quot; ) 5.5.8 facetの前に ここまで可視化してきたものは、2012年から2018年のデータを分け隔てなく一枚のプロットに描画していました facetは年別などのグループ比較をするために使います long_emp # A tibble: 12,516 x 4 企業コード year 従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2012 1254 NA 2 B02111302 2013 768 0.612 3 B02111302 2014 1242 1.62 4 B02111302 2015 1409 1.13 5 B02111302 2016 728 0.517 6 B02111302 2017 1401 1.92 7 B02111302 2018 1096 0.782 8 B02117802 2012 82 NA 9 B02117802 2013 376 4.58 10 B02117802 2014 374 0.995 # ... with 12,506 more rows 5.5.9 facet：グループ比較 facet_wrap関数を使えばグループ比較ができます グループ比較する変数を“vars(変数名)”の形で指定します long_emp %&gt;% ggplot(aes(x = 従業員数伸び率)) + geom_histogram() + labs(title = &quot;年別での従業員数伸び率&quot;) + facet_wrap(vars(year)) 5.5.10 可視化のススメ ggplot2による可視化の基礎は以上になります ggplot2を使えば、こで紹介したもの以外にも多種多様なプロットをフレキシブルに作成することができます データを可視化する力はデータ研磨力と並んでとても重要です 書籍で勉強したり、色々なデータで色々な可視化に挑戦することをお勧めします 最後に、今回のlong_empの可視化についていくつか参考を載せておきます 5.5.11 参考１：データの整形 先ほどのヒストグラムを見ると、データに異常に大きな値が含まれていることがわかります データ整形後に、パイプで一気にggplot関数にデータを入れることは往々にしてあります 従業員数伸び率が3%以下のデータのみとしました 2012年の従業員数伸び率は全てNAなのでなくなりました plotをオブジェクトに保存後のレイヤー追加もできます p &lt;- long_emp %&gt;% filter(従業員数伸び率 &lt; 3) %&gt;% ggplot(aes(x = 従業員数伸び率)) + geom_histogram() + facet_wrap(vars(year)) p + labs(title = &quot;年別での従業員数伸び率&quot;) 5.5.12 参考２：データの比較 facetでの比較も便利ですが、少数のグループであればカラーを分けて比較する方法もあります たとえば2013年と2018年のデータだけで比較してみましょう aes内のfill(あるいはcolor)にグループのカラムを指定します alphaは色の濃さを指定しています long_emp %&gt;% filter(従業員数伸び率 &lt; 3, year == &quot;2013&quot; | year == &quot;2018&quot;) %&gt;% ggplot(aes(x = 従業員数伸び率, fill = year)) + geom_density(alpha = 0.4) + labs(title = &quot;2013年と2018年の従業員数伸び率比較&quot;) 5.5.13 参考３：適切な可視化 データを可視化する方法に答えはありませんが、適切な可視化を模索するのは大切なプロセスです p &lt;- long_emp %&gt;% filter(従業員数伸び率 &lt; 3) %&gt;% ggplot(aes(x = year, y = 従業員数伸び率)) + labs(title = &quot;従業員数伸び率比較&quot;) P + geom_boxplot() p + geom_violin() p + geom_violin() + geom_jitter(alpha = 0.1) 5.6 ランキングの作成 データから知見を得ましょう 5.6.1 結果の確認 データを可視化してデータの概要は掴めました 次はデータから有益な情報を得るために、従業員数データであるlong_empからランキングを作成しましょう ここでは業種別に従業員数伸び率ランキングを作成します # A tibble: 1,667 x 4 企業コード 従業員数伸び率 業種大分類_2018 rank &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; 1 F62151343 4.22 A:農業 1 2 J30067647 0.598 D:鉱業 1 3 J34531369 0.41 D:鉱業 2 4 J34080260 0.269 D:鉱業 3 5 J34809061 0.189 D:鉱業 4 6 J34787560 15.9 E:建設業 1 7 F12124685 8.63 E:建設業 2 8 J34599205 6.34 E:建設業 3 9 F82182754 4.49 E:建設業 4 10 J34598664 3.52 E:建設業 5 # ... with 1,657 more rows 5.6.2 内容と手順 内容 従業員数データ(long_sales)を用いて、産業大分類ごとに、2018年の従業員数伸び率が高い順にランキングを付与します ただし2017年の従業員数が100人以上の企業を対象とし、同着であった場合は順位を飛ばしてください 手順 2017年の従業員数が100人以上の条件でデータを抽出する long_empに業種大分類_2018のデータがないので、data_listのdata_2018から業種大分類_2018を企業コードで紐づける 業種でグループ化して2018年従業員数伸び率ランキングを付与する 実施前に、次頁でランキング関数の説明をします。 5.6.3 ランキング関数 はじめにランキングを付与する関数を3つ説明します numカラムの値に対してランキングを作成しています row_number 同着は先に出たほうを優先 min_rank 同着は同じ順位、gapあり dense_rank 同着は同じ順位、gapなし （補足） 昇順がデフォルト 降順はdescをかませる d %&gt;% mutate(rank = min_rank(desc(num))) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #qedbjfpqcm .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 22px; font-weight: normal; font-style: normal; background-color: #F4F7E2; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #qedbjfpqcm .gt_heading { background-color: #F4F7E2; text-align: center; border-bottom-color: #F4F7E2; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qedbjfpqcm .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #F4F7E2; border-bottom-width: 0; } #qedbjfpqcm .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #F4F7E2; border-top-width: 0; } #qedbjfpqcm .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qedbjfpqcm .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #qedbjfpqcm .gt_col_heading { color: #333333; background-color: #F4F7E2; font-size: 22px; font-weight: bold; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #qedbjfpqcm .gt_column_spanner_outer { color: #333333; background-color: #F4F7E2; font-size: 22px; font-weight: bold; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #qedbjfpqcm .gt_column_spanner_outer:first-child { padding-left: 0; } #qedbjfpqcm .gt_column_spanner_outer:last-child { padding-right: 0; } #qedbjfpqcm .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #qedbjfpqcm .gt_group_heading { padding: 8px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #qedbjfpqcm .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #qedbjfpqcm .gt_from_md > :first-child { margin-top: 0; } #qedbjfpqcm .gt_from_md > :last-child { margin-bottom: 0; } #qedbjfpqcm .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #qedbjfpqcm .gt_stub { color: #333333; background-color: #F4F7E2; font-size: 100%; font-weight: bold; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #qedbjfpqcm .gt_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qedbjfpqcm .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #qedbjfpqcm .gt_grand_summary_row { color: #333333; background-color: #F4F7E2; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #qedbjfpqcm .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #qedbjfpqcm .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #qedbjfpqcm .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #qedbjfpqcm .gt_footnotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qedbjfpqcm .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #qedbjfpqcm .gt_sourcenotes { color: #333333; background-color: #F4F7E2; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #qedbjfpqcm .gt_sourcenote { font-size: 90%; padding: 4px; } #qedbjfpqcm .gt_left { text-align: left; } #qedbjfpqcm .gt_center { text-align: center; } #qedbjfpqcm .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #qedbjfpqcm .gt_font_normal { font-weight: normal; } #qedbjfpqcm .gt_font_bold { font-weight: bold; } #qedbjfpqcm .gt_font_italic { font-style: italic; } #qedbjfpqcm .gt_super { font-size: 65%; } #qedbjfpqcm .gt_footnote_marks { font-style: italic; font-size: 65%; } num row_number min_rank dense_rank 100 1 1 1 200 2 2 2 200 3 2 2 300 4 4 3 400 5 5 4 400 6 5 4 400 7 5 4 500 8 8 5 5.6.4 手順１：2017年の従業員数が100人以上 2017年の従業員数が100人以上という条件でfilterをかけると、2018年のデータも消えてしまいます long_emp %&gt;% filter(year == &quot;2017&quot;, 従業員数 &gt;= 100) %&gt;% arrange(desc(year)) # A tibble: 1,667 x 4 企業コード year 従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2017 1401 1.92 2 B02117802 2017 233 0.552 3 B02122250 2017 523 1.76 4 B02122602 2017 7564 0.445 5 B02125529 2017 2274 1.03 6 B02128716 2017 261 0.798 7 B02129789 2017 645 0.591 8 B02153443 2017 3960 1.10 9 B02505784 2017 902 1.81 10 B02514384 2017 154 0.647 # ... with 1,657 more rows 先に条件を満たす企業コードを抽出し、その企業コードに対して売上高データをjoinさせる方法で対処します 条件抽出したデータをemp_growth_rank_2018とします emp_growth_rank_2018 &lt;- long_emp %&gt;% filter(year == &quot;2017&quot;, 従業員数 &gt;= 100) %&gt;% select(企業コード) %&gt;% left_join(long_emp, by = &quot;企業コード&quot;) %&gt;% # 以降は2018年のデータのみでよい filter(year == &quot;2018&quot;) emp_growth_rank_2018 # A tibble: 1,667 x 4 企業コード year 従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 2018 1096 0.782 2 B02117802 2018 173 0.742 3 B02122250 2018 695 1.33 4 B02122602 2018 12493 1.65 5 B02125529 2018 2472 1.09 6 B02128716 2018 376 1.44 7 B02129789 2018 986 1.53 8 B02153443 2018 5563 1.40 9 B02505784 2018 728 0.807 10 B02514384 2018 324 2.10 # ... with 1,657 more rows 5.6.5 手順２：業種大分類をjoin 業種大分類はdata_2018とjoinすることで付与します emp_growth_rank_2018 &lt;- emp_growth_rank_2018 %&gt;% left_join(data_list$data_2018 %&gt;% select(&quot;企業コード&quot;, contains(&quot;業種大分類&quot;)), by = &quot;企業コード&quot;) emp_growth_rank_2018 %&gt;% relocate(&quot;企業コード&quot;, contains(&quot;業種大分類&quot;)) # A tibble: 1,667 x 5 企業コード 業種大分類_2018 year 従業員数 従業員数伸び率 &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 B02111302 F:製造業 2018 1096 0.782 2 B02117802 G:卸売・小売業，飲食 2018 173 0.742 3 B02122250 F:製造業 2018 695 1.33 4 B02122602 J:運輸・通信業 2018 12493 1.65 5 B02125529 F:製造業 2018 2472 1.09 6 B02128716 F:製造業 2018 376 1.44 7 B02129789 G:卸売・小売業，飲食 2018 986 1.53 8 B02153443 G:卸売・小売業，飲食 2018 5563 1.40 9 B02505784 F:製造業 2018 728 0.807 10 B02514384 F:製造業 2018 324 2.10 # ... with 1,657 more rows 5.6.6 手順３：業種別ランキング作成 業種ごとに従業員数伸び率のランキングを付与します 同着後は飛ばす必要がある(gapあり)ランキングなのでminn_rank関数を使用し、descで降順にrankをつけます 業種とrankでソートし、不要なカラムを消去します emp_growth_rank_2018 &lt;- emp_growth_rank_2018 %&gt;% group_by(業種大分類_2018) %&gt;% mutate(rank = min_rank(desc(従業員数伸び率))) %&gt;% arrange(業種大分類_2018, rank) %&gt;% select(-従業員数, -year) %&gt;% ungroup() 5.6.7 ランキングデータ完成 2017年の従業員数が100人以上の企業で、業種ごとに従業員数伸び率ランキングを作成したデータが完成しました emp_growth_rank_2018 # A tibble: 1,667 x 4 企業コード 従業員数伸び率 業種大分類_2018 rank &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; 1 F62151343 4.22 A:農業 1 2 J30067647 0.598 D:鉱業 1 3 J34531369 0.41 D:鉱業 2 4 J34080260 0.269 D:鉱業 3 5 J34809061 0.189 D:鉱業 4 6 J34787560 15.9 E:建設業 1 7 F12124685 8.63 E:建設業 2 8 J34599205 6.34 E:建設業 3 9 F82182754 4.49 E:建設業 4 10 J34598664 3.52 E:建設業 5 # ... with 1,657 more rows 5.6.8 ランキング作成まとめ 手順１から手順３のコードをまとめたものです。 # 2017年の従業員数が100人以上のデータを抽出 emp_growth_rank_2018 &lt;- long_emp %&gt;% filter(year == &quot;2017&quot;, 従業員数 &gt;= 100) %&gt;% select(企業コード) %&gt;% left_join(long_emp, by = &quot;企業コード&quot;) %&gt;% filter(year == &quot;2018&quot;) # 業種大分類を付与 emp_growth_rank_2018 &lt;- emp_growth_rank_2018 %&gt;% left_join(data_list$data_2018 %&gt;% select(&quot;企業コード&quot;, contains(&quot;業種大分類&quot;)), by = &quot;企業コード&quot;) # 業種ごとにランキングを作成してデータを整形 emp_growth_rank_2018 &lt;- emp_growth_rank_2018 %&gt;% group_by(業種大分類_2018) %&gt;% mutate(rank = min_rank(desc(従業員数伸び率))) %&gt;% arrange(業種大分類_2018, rank) %&gt;% select(-従業員数, -year) %&gt;% ungroup() おわり 中級編は以上になります。お疲れさまでした。 "],["environment.html", "動作環境", " 動作環境 OSやパッケージのバージョン情報です。 sessionInfo() R version 4.0.3 (2020-10-10) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 10 x64 (build 19042) Matrix products: default locale: [1] LC_COLLATE=Japanese_Japan.932 LC_CTYPE=Japanese_Japan.932 [3] LC_MONETARY=Japanese_Japan.932 LC_NUMERIC=C [5] LC_TIME=Japanese_Japan.932 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] patchwork_1.1.1 diffdf_1.0.4 glue_1.4.2 knitr_1.31 [5] gt_0.2.2 bookdown_0.21.6 furrr_0.2.2 future_1.21.0 [9] here_1.0.1 forcats_0.5.1 stringr_1.4.0 dplyr_1.0.4 [13] purrr_0.3.4 readr_1.4.0 tidyr_1.1.2 tibble_3.0.6 [17] ggplot2_3.3.3 tidyverse_1.3.0 loaded via a namespace (and not attached): [1] Rcpp_1.0.6 lubridate_1.7.9.2 listenv_0.8.0 utf8_1.1.4 [5] assertthat_0.2.1 rprojroot_2.0.2 digest_0.6.27 parallelly_1.23.0 [9] R6_2.5.0 cellranger_1.1.0 backports_1.2.0 reprex_1.0.0 [13] visdat_0.5.3 evaluate_0.14 httr_1.4.2 highr_0.8 [17] pillar_1.4.7 rlang_0.4.10 readxl_1.3.1 rstudioapi_0.13 [21] jquerylib_0.1.3 checkmate_2.0.0 rmarkdown_2.7 labeling_0.4.2 [25] munsell_0.5.0 broom_0.7.4 compiler_4.0.3 modelr_0.1.8 [29] xfun_0.21 pkgconfig_2.0.3 globals_0.14.0 htmltools_0.5.1.1 [33] tidyselect_1.1.0 codetools_0.2-18 fansi_0.4.2 crayon_1.4.1 [37] dbplyr_2.0.0 withr_2.4.1 grid_4.0.3 jsonlite_1.7.2 [41] gtable_0.3.0 lifecycle_0.2.0 DBI_1.1.1 magrittr_2.0.1 [45] scales_1.1.1 cli_2.3.0 stringi_1.5.3 farver_2.0.3 [49] fs_1.5.0 xml2_1.3.2 naniar_0.6.0 bslib_0.2.4 [53] ellipsis_0.3.1 generics_0.1.0 vctrs_0.3.6 tools_4.0.3 [57] hms_1.0.0 parallel_4.0.3 yaml_2.2.1 colorspace_2.0-0 [61] rvest_0.3.6 haven_2.3.1 sass_0.3.1 sessioninfo::platform_info() setting value version R version 4.0.3 (2020-10-10) os Windows 10 x64 system x86_64, mingw32 ui RStudio language en collate Japanese_Japan.932 ctype Japanese_Japan.932 tz Asia/Tokyo date 2021-02-20 "]]
